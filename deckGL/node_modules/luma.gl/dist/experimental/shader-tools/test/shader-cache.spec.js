'use strict';

require('luma.gl/headless');

var _luma = require('luma.gl');

var _ = require('..');

var _tapeCatch = require('tape-catch');

var _tapeCatch2 = _interopRequireDefault(_tapeCatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fixture = {
  gl: (0, _luma.createGLContext)()
};

var VS1 = '\nattribute vec3 positions;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\n\nvoid main(void) {\n  gl_Position = uPMatrix * uMVMatrix * vec4(positions, 1.0);\n}\n';

var VS2 = '\nattribute vec3 positions;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\n\nvoid main(void) {\n  gl_Position = uPMatrix * uMVMatrix * vec4(positions, 1.0);\n}\n';

var VS3 = '\nattribute vec3 positions;\n\nuniform mat4 uPMatrix;\n\nvoid main(void) {\n  gl_Position = uPMatrix * vec4(positions, 1.0);\n}\n';

var FS1 = '\nvoid main(void) {\n  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}\n';

var FS2 = '\nvoid main(void) {\n  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}\n';

var FS3 = '\nvoid main(void) {\n  gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n';

(0, _tapeCatch2.default)('Experimental#ShaderCache import', function (t) {
  t.ok(_.ShaderCache !== undefined, 'ShaderCache import successful');
  t.end();
});

(0, _tapeCatch2.default)('Experimental#ShaderCache construct/delete', function (t) {
  var shaderCache = new _.ShaderCache();
  t.ok(shaderCache instanceof _.ShaderCache, 'ShaderCache construction successful');
  shaderCache = shaderCache.delete();
  t.ok(shaderCache instanceof _.ShaderCache, 'ShaderCache delete successful');
  t.end();
});

(0, _tapeCatch2.default)('Experimental#ShaderCache get cached vertex shaders', function (t) {
  var gl = fixture.gl;


  var shaderCache = new _.ShaderCache(gl);

  var vs1 = shaderCache.getVertexShader(gl, VS1);
  var vs2 = shaderCache.getVertexShader(gl, VS2);

  t.ok(vs1 instanceof _luma.VertexShader, 'Got good VertexShader from cache');
  t.ok(vs2 instanceof _luma.VertexShader, 'Got good VertexShader from cache');

  t.equal(vs1, vs2, 'Second VertexShader was cached');

  var vs3 = shaderCache.getVertexShader(gl, VS3);
  t.ok(vs3 instanceof _luma.VertexShader, 'Got good VertexShader from cache');

  t.notEqual(vs1, vs3, 'Third VertexShader was not cached');

  t.end();
});

(0, _tapeCatch2.default)('Experimental#ShaderCache get cached fragment shaders', function (t) {
  var gl = fixture.gl;


  var shaderCache = new _.ShaderCache(gl);

  var fs1 = shaderCache.getFragmentShader(gl, FS1);
  var fs2 = shaderCache.getFragmentShader(gl, FS2);

  t.ok(fs1 instanceof _luma.FragmentShader, 'Got good FragmentShader from cache');
  t.ok(fs2 instanceof _luma.FragmentShader, 'Got good FragmentShader from cache');

  t.equal(fs1, fs2, 'Second FragmentShader was cached');

  var fs3 = shaderCache.getFragmentShader(gl, FS3);
  t.ok(fs3 instanceof _luma.FragmentShader, 'Got good FragmentShader from cache');

  t.notEqual(fs1, fs3, 'Third FragmentShader was not cached');

  t.end();
});

(0, _tapeCatch2.default)('Experimental#ShaderCache - construct Program from cached shaders', function (t) {
  var gl = fixture.gl;


  var shaderCache = new _.ShaderCache();
  shaderCache.getVertexShader(gl, VS1);
  shaderCache.getFragmentShader(gl, FS1);

  var program = new _luma.Program(gl, {
    vs: shaderCache.getVertexShader(gl, VS1),
    fs: shaderCache.getFragmentShader(gl, FS1)
  });
  t.ok(program instanceof _luma.Program, 'Program constructed from cached shaders successful ');

  program = program.delete();
  t.ok(program instanceof _luma.Program, 'Program delete successful');

  var program2 = new _luma.Program(gl, {
    vs: shaderCache.getVertexShader(gl, VS1),
    fs: shaderCache.getFragmentShader(gl, FS1)
  });
  t.ok(program2 instanceof _luma.Program, 'Program constructed from cached shaders successful after delete of first program');

  t.end();
});
//# sourceMappingURL=data:application/json;base64,