'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GL_BUFFER_USAGE = exports.GL_TARGETS = exports.GL_DRAW_MODES = exports.GL_INDEX_TYPES = undefined;
exports.isWebGLContext = isWebGLContext;
exports.isWebGL2Context = isWebGL2Context;
exports.assertWebGLContext = assertWebGLContext;
exports.assertWebGL2Context = assertWebGL2Context;
exports.isIndexType = isIndexType;
exports.assertIndexType = assertIndexType;
exports.isDrawMode = isDrawMode;
exports.assertDrawMode = assertDrawMode;
exports.assertArrayTypeMatch = assertArrayTypeMatch;
exports.glGetError = glGetError;
exports.glCheckError = glCheckError;

var _webglTypes = require('./webgl-types');

var _webglConstants = require('./webgl-constants');

var _webglConstants2 = _interopRequireDefault(_webglConstants);

var _webglArrays = require('./webgl-arrays');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Helper definitions for validation of webgl parameters
/* eslint-disable no-inline-comments, max-len */
var ERR_CONTEXT = 'Invalid WebGLRenderingContext';
var ERR_WEBGL2 = 'Requires WebGL2';

function isWebGLContext(gl) {
  return gl instanceof _webglTypes.WebGLRenderingContext || gl && gl.ARRAY_BUFFER === 0x8892;
}

function isWebGL2Context(gl) {
  return gl instanceof _webglTypes.WebGL2RenderingContext || gl && gl.TEXTURE_BINDING_3D === 0x806A;
}

function assertWebGLContext(gl) {
  // Need to handle debug context
  (0, _assert2.default)(isWebGLContext(gl), ERR_CONTEXT);
}

function assertWebGL2Context(gl) {
  // Need to handle debug context
  (0, _assert2.default)(isWebGL2Context(gl), ERR_WEBGL2);
}

// INDEX TYPES

// For drawElements, size of indices
var GL_INDEX_TYPES = exports.GL_INDEX_TYPES = [_webglConstants2.default.UNSIGNED_BYTE, _webglConstants2.default.UNSIGNED_SHORT, _webglConstants2.default.UNSIGNED_INT];

function isIndexType(type) {
  return GL_INDEX_TYPES.indexOf(type) !== -1;
}

function assertIndexType(glType, source) {
  (0, _assert2.default)(isIndexType(glType), 'Bad index type ' + (0, _webglConstants.glKey)(glType) + ' ' + source);
}

// DRAW MODES

var GL_DRAW_MODES = exports.GL_DRAW_MODES = [_webglConstants2.default.POINTS, _webglConstants2.default.LINE_STRIP, _webglConstants2.default.LINE_LOOP, _webglConstants2.default.LINES, _webglConstants2.default.TRIANGLE_STRIP, _webglConstants2.default.TRIANGLE_FAN, _webglConstants2.default.TRIANGLES];

function isDrawMode(glMode) {
  return GL_DRAW_MODES.indexOf(glMode) !== -1;
}

function assertDrawMode(glType, source) {
  (0, _assert2.default)(isDrawMode(glType), 'Bad draw mode ' + (0, _webglConstants.glKey)(glType) + ' ' + source);
}

// TARGET TYPES

var GL_TARGETS = exports.GL_TARGETS = [_webglConstants2.default.ARRAY_BUFFER, // vertex attributes (e.g. vertex/texture coords or color)
_webglConstants2.default.ELEMENT_ARRAY_BUFFER, // Buffer used for element indices.
// For WebGL 2 contexts
_webglConstants2.default.COPY_READ_BUFFER, // Buffer for copying from one buffer object to another
_webglConstants2.default.COPY_WRITE_BUFFER, // Buffer for copying from one buffer object to another
_webglConstants2.default.TRANSFORM_FEEDBACK_BUFFER, // Buffer for transform feedback operations
_webglConstants2.default.UNIFORM_BUFFER, // Buffer used for storing uniform blocks
_webglConstants2.default.PIXEL_PACK_BUFFER, // Buffer used for pixel transfer operations
_webglConstants2.default.PIXEL_UNPACK_BUFFER // Buffer used for pixel transfer operations
];

// USAGE TYPES

var GL_BUFFER_USAGE = exports.GL_BUFFER_USAGE = [_webglConstants2.default.STATIC_DRAW, // Buffer used often and not change often. Contents are written to the buffer, but not read.
_webglConstants2.default.DYNAMIC_DRAW, // Buffer used often and change often. Contents are written to the buffer, but not read.
_webglConstants2.default.STREAM_DRAW, // Buffer not used often. Contents are written to the buffer, but not read.
// For WebGL 2 contexts
_webglConstants2.default.STATIC_READ, // Buffer used often and not change often. Contents are read from the buffer, but not written.
_webglConstants2.default.DYNAMIC_READ, // Buffer used often and change often. Contents are read from the buffer, but not written.
_webglConstants2.default.STREAM_READ, // Contents of the buffer are likely to not be used often. Contents are read from the buffer, but not written.
_webglConstants2.default.STATIC_COPY, // Buffer used often and not change often. Contents are neither written or read by the user.
_webglConstants2.default.DYNAMIC_COPY, // Buffer used often and change often. Contents are neither written or read by the user.
_webglConstants2.default.STREAM_COPY // Buffer used often and not change often. Contents are neither written or read by the user.
];

function assertArrayTypeMatch(array, type, source) {
  (0, _assert2.default)(type === (0, _webglArrays.glTypeFromArray)(array), (array.constructor.name || 'Array') + ' ' + ('does not match element type ' + (0, _webglConstants.glKey)(type) + ' ' + source));
}

// GL errors

// Returns an Error representing the Latest webGl error or null
function glGetError(gl) {
  // Loop to ensure all errors are cleared
  var errorStack = [];
  var glError = gl.getError();
  while (glError !== gl.NO_ERROR) {
    errorStack.push(glGetErrorMessage(gl, glError));
    glError = gl.getError();
  }
  return errorStack.length ? new Error(errorStack.join('\n')) : null;
}

function glCheckError(gl) {
  if (gl.debug) {
    var error = glGetError(gl);
    if (error) {
      throw error;
    }
  }
}

function glGetErrorMessage(gl, glError) {
  switch (glError) {
    case _webglConstants2.default.CONTEXT_LOST_WEBGL:
      //  If the WebGL context is lost, this error is returned on the
      // first call to getError. Afterwards and until the context has been
      // restored, it returns gl.NO_ERROR.
      return 'WebGL context lost';
    case _webglConstants2.default.INVALID_ENUM:
      // An unacceptable value has been specified for an enumerated argument.
      return 'WebGL invalid enumerated argument';
    case _webglConstants2.default.INVALID_VALUE:
      // A numeric argument is out of range.
      return 'WebGL invalid value';
    case _webglConstants2.default.INVALID_OPERATION:
      // The specified command is not allowed for the current state.
      return 'WebGL invalid operation';
    case _webglConstants2.default.INVALID_FRAMEBUFFER_OPERATION:
      // The currently bound framebuffer is not framebuffer complete
      // when trying to render to or to read from it.
      return 'WebGL invalid framebuffer operation';
    case _webglConstants2.default.OUT_OF_MEMORY:
      // Not enough memory is left to execute the command.
      return 'WebGL out of memory';
    default:
      return 'WebGL unknown error ' + glError;
  }
}
//# sourceMappingURL=data:application/json;base64,