var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Common environment setup
 */
/* eslint-disable no-console */
/* global process */
import console from 'global/console';
import window from 'global/window';

// Duck-type Node context
export var IS_NODE = (typeof process === 'undefined' ? 'undefined' : _typeof(process)) !== undefined && process.toString() === '[object process]';

// Configure console

// Console.debug is useful in chrome as it gives blue styling, but is not
// available in node
console.debug = console.debug || console.log;

// Some instrumentation may override console methods, so preserve them here
console.native = {
  debug: console.debug.bind(console),
  log: console.log.bind(console),
  warn: console.warn.bind(console),
  error: console.error.bind(console)
};

export { console as logger };

// Set up high resolution timer
var timestamp = void 0;
if (IS_NODE) {
  timestamp = function timestamp() {
    var _process$hrtime = process.hrtime(),
        _process$hrtime2 = _slicedToArray(_process$hrtime, 2),
        seconds = _process$hrtime2[0],
        nanoseconds = _process$hrtime2[1];

    return seconds + nanoseconds / 1e6;
  };
} else if (window.performance) {
  timestamp = function timestamp() {
    return window.performance.now();
  };
} else {
  timestamp = function timestamp() {
    return Date.now();
  };
}

export { timestamp };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9leHBlcmltZW50YWwvcHJvYmUvc3JjL2Vudi5qcyJdLCJuYW1lcyI6WyJjb25zb2xlIiwid2luZG93IiwiSVNfTk9ERSIsInByb2Nlc3MiLCJ1bmRlZmluZWQiLCJ0b1N0cmluZyIsImRlYnVnIiwibG9nIiwibmF0aXZlIiwiYmluZCIsIndhcm4iLCJlcnJvciIsImxvZ2dlciIsInRpbWVzdGFtcCIsImhydGltZSIsInNlY29uZHMiLCJuYW5vc2Vjb25kcyIsInBlcmZvcm1hbmNlIiwibm93IiwiRGF0ZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7QUFHQTtBQUNBO0FBQ0EsT0FBT0EsT0FBUCxNQUFvQixnQkFBcEI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLGVBQW5COztBQUVBO0FBQ0EsT0FBTyxJQUFNQyxVQUFVLFFBQU9DLE9BQVAseUNBQU9BLE9BQVAsT0FBbUJDLFNBQW5CLElBQ3JCRCxRQUFRRSxRQUFSLE9BQXVCLGtCQURsQjs7QUFHUDs7QUFFQTtBQUNBO0FBQ0FMLFFBQVFNLEtBQVIsR0FBZ0JOLFFBQVFNLEtBQVIsSUFBaUJOLFFBQVFPLEdBQXpDOztBQUVBO0FBQ0FQLFFBQVFRLE1BQVIsR0FBaUI7QUFDZkYsU0FBT04sUUFBUU0sS0FBUixDQUFjRyxJQUFkLENBQW1CVCxPQUFuQixDQURRO0FBRWZPLE9BQUtQLFFBQVFPLEdBQVIsQ0FBWUUsSUFBWixDQUFpQlQsT0FBakIsQ0FGVTtBQUdmVSxRQUFNVixRQUFRVSxJQUFSLENBQWFELElBQWIsQ0FBa0JULE9BQWxCLENBSFM7QUFJZlcsU0FBT1gsUUFBUVcsS0FBUixDQUFjRixJQUFkLENBQW1CVCxPQUFuQjtBQUpRLENBQWpCOztBQU9BLFNBQVFBLFdBQVdZLE1BQW5COztBQUVBO0FBQ0EsSUFBSUMsa0JBQUo7QUFDQSxJQUFJWCxPQUFKLEVBQWE7QUFDWFcsY0FBWSxxQkFBTTtBQUFBLDBCQUNlVixRQUFRVyxNQUFSLEVBRGY7QUFBQTtBQUFBLFFBQ1RDLE9BRFM7QUFBQSxRQUNBQyxXQURBOztBQUVoQixXQUFPRCxVQUFVQyxjQUFjLEdBQS9CO0FBQ0QsR0FIRDtBQUlELENBTEQsTUFLTyxJQUFJZixPQUFPZ0IsV0FBWCxFQUF3QjtBQUM3QkosY0FBWTtBQUFBLFdBQU1aLE9BQU9nQixXQUFQLENBQW1CQyxHQUFuQixFQUFOO0FBQUEsR0FBWjtBQUNELENBRk0sTUFFQTtBQUNMTCxjQUFZO0FBQUEsV0FBTU0sS0FBS0QsR0FBTCxFQUFOO0FBQUEsR0FBWjtBQUNEOztBQUVELFNBQVFMLFNBQVIiLCJmaWxlIjoiZW52LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb21tb24gZW52aXJvbm1lbnQgc2V0dXBcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuLyogZ2xvYmFsIHByb2Nlc3MgKi9cbmltcG9ydCBjb25zb2xlIGZyb20gJ2dsb2JhbC9jb25zb2xlJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5cbi8vIER1Y2stdHlwZSBOb2RlIGNvbnRleHRcbmV4cG9ydCBjb25zdCBJU19OT0RFID0gdHlwZW9mIHByb2Nlc3MgIT09IHVuZGVmaW5lZCAmJlxuICBwcm9jZXNzLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IHByb2Nlc3NdJztcblxuLy8gQ29uZmlndXJlIGNvbnNvbGVcblxuLy8gQ29uc29sZS5kZWJ1ZyBpcyB1c2VmdWwgaW4gY2hyb21lIGFzIGl0IGdpdmVzIGJsdWUgc3R5bGluZywgYnV0IGlzIG5vdFxuLy8gYXZhaWxhYmxlIGluIG5vZGVcbmNvbnNvbGUuZGVidWcgPSBjb25zb2xlLmRlYnVnIHx8IGNvbnNvbGUubG9nO1xuXG4vLyBTb21lIGluc3RydW1lbnRhdGlvbiBtYXkgb3ZlcnJpZGUgY29uc29sZSBtZXRob2RzLCBzbyBwcmVzZXJ2ZSB0aGVtIGhlcmVcbmNvbnNvbGUubmF0aXZlID0ge1xuICBkZWJ1ZzogY29uc29sZS5kZWJ1Zy5iaW5kKGNvbnNvbGUpLFxuICBsb2c6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksXG4gIHdhcm46IGNvbnNvbGUud2Fybi5iaW5kKGNvbnNvbGUpLFxuICBlcnJvcjogY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpXG59O1xuXG5leHBvcnQge2NvbnNvbGUgYXMgbG9nZ2VyfTtcblxuLy8gU2V0IHVwIGhpZ2ggcmVzb2x1dGlvbiB0aW1lclxubGV0IHRpbWVzdGFtcDtcbmlmIChJU19OT0RFKSB7XG4gIHRpbWVzdGFtcCA9ICgpID0+IHtcbiAgICBjb25zdCBbc2Vjb25kcywgbmFub3NlY29uZHNdID0gcHJvY2Vzcy5ocnRpbWUoKTtcbiAgICByZXR1cm4gc2Vjb25kcyArIG5hbm9zZWNvbmRzIC8gMWU2O1xuICB9O1xufSBlbHNlIGlmICh3aW5kb3cucGVyZm9ybWFuY2UpIHtcbiAgdGltZXN0YW1wID0gKCkgPT4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xufSBlbHNlIHtcbiAgdGltZXN0YW1wID0gKCkgPT4gRGF0ZS5ub3coKTtcbn1cblxuZXhwb3J0IHt0aW1lc3RhbXAgYXMgdGltZXN0YW1wfTtcbiJdfQ==