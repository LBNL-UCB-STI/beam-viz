function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Model } from '../core';
import { SphereGeometry } from '../geometry';
import { uid } from '../utils';

var Sphere = function (_Model) {
  _inherits(Sphere, _Model);

  function Sphere() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Sphere);

    var _opts$id = opts.id,
        id = _opts$id === undefined ? uid('sphere') : _opts$id;
    return _possibleConstructorReturn(this, (Sphere.__proto__ || Object.getPrototypeOf(Sphere)).call(this, Object.assign({}, opts, { id: id, geometry: new SphereGeometry(opts) })));
  }

  return Sphere;
}(Model);

export { Sphere as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvc3BoZXJlLmpzIl0sIm5hbWVzIjpbIk1vZGVsIiwiU3BoZXJlR2VvbWV0cnkiLCJ1aWQiLCJTcGhlcmUiLCJvcHRzIiwiaWQiLCJPYmplY3QiLCJhc3NpZ24iLCJnZW9tZXRyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBUUEsS0FBUixRQUFvQixTQUFwQjtBQUNBLFNBQVFDLGNBQVIsUUFBNkIsYUFBN0I7QUFDQSxTQUFRQyxHQUFSLFFBQWtCLFVBQWxCOztJQUVxQkMsTTs7O0FBQ25CLG9CQUF1QjtBQUFBLFFBQVhDLElBQVcsdUVBQUosRUFBSTs7QUFBQTs7QUFBQSxtQkFDUUEsSUFEUixDQUNkQyxFQURjO0FBQUEsUUFDZEEsRUFEYyw0QkFDVEgsSUFBSSxRQUFKLENBRFM7QUFBQSwyR0FFZkksT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JILElBQWxCLEVBQXdCLEVBQUNDLE1BQUQsRUFBS0csVUFBVSxJQUFJUCxjQUFKLENBQW1CRyxJQUFuQixDQUFmLEVBQXhCLENBRmU7QUFHdEI7OztFQUppQ0osSzs7U0FBZkcsTSIsImZpbGUiOiJzcGhlcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01vZGVsfSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCB7U3BoZXJlR2VvbWV0cnl9IGZyb20gJy4uL2dlb21ldHJ5JztcbmltcG9ydCB7dWlkfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwaGVyZSBleHRlbmRzIE1vZGVsIHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgY29uc3Qge2lkID0gdWlkKCdzcGhlcmUnKX0gPSBvcHRzO1xuICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oe30sIG9wdHMsIHtpZCwgZ2VvbWV0cnk6IG5ldyBTcGhlcmVHZW9tZXRyeShvcHRzKX0pKTtcbiAgfVxufVxuIl19