function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import TruncatedConeGeometry from './truncated-cone-geometry';

var ConeGeometry = function (_TruncatedConeGeometr) {
  _inherits(ConeGeometry, _TruncatedConeGeometr);

  function ConeGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ConeGeometry);

    var _opts$radius = opts.radius,
        radius = _opts$radius === undefined ? 1 : _opts$radius,
        _opts$cap = opts.cap,
        cap = _opts$cap === undefined ? true : _opts$cap;
    return _possibleConstructorReturn(this, (ConeGeometry.__proto__ || Object.getPrototypeOf(ConeGeometry)).call(this, Object.assign({}, opts, {
      topRadius: 0,
      topCap: Boolean(cap),
      bottomCap: Boolean(cap),
      bottomRadius: radius
    })));
  }

  return ConeGeometry;
}(TruncatedConeGeometry);

export { ConeGeometry as default };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZW9tZXRyeS9jb25lLWdlb21ldHJ5LmpzIl0sIm5hbWVzIjpbIlRydW5jYXRlZENvbmVHZW9tZXRyeSIsIkNvbmVHZW9tZXRyeSIsIm9wdHMiLCJyYWRpdXMiLCJjYXAiLCJPYmplY3QiLCJhc3NpZ24iLCJ0b3BSYWRpdXMiLCJ0b3BDYXAiLCJCb29sZWFuIiwiYm90dG9tQ2FwIiwiYm90dG9tUmFkaXVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPQSxxQkFBUCxNQUFrQywyQkFBbEM7O0lBRXFCQyxZOzs7QUFDbkIsMEJBQXVCO0FBQUEsUUFBWEMsSUFBVyx1RUFBSixFQUFJOztBQUFBOztBQUFBLHVCQUNZQSxJQURaLENBQ2RDLE1BRGM7QUFBQSxRQUNkQSxNQURjLGdDQUNMLENBREs7QUFBQSxvQkFDWUQsSUFEWixDQUNGRSxHQURFO0FBQUEsUUFDRkEsR0FERSw2QkFDSSxJQURKO0FBQUEsdUhBRWZDLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSixJQUFsQixFQUF3QjtBQUM1QkssaUJBQVcsQ0FEaUI7QUFFNUJDLGNBQVFDLFFBQVFMLEdBQVIsQ0FGb0I7QUFHNUJNLGlCQUFXRCxRQUFRTCxHQUFSLENBSGlCO0FBSTVCTyxvQkFBY1I7QUFKYyxLQUF4QixDQUZlO0FBUXRCOzs7RUFUdUNILHFCOztTQUFyQkMsWSIsImZpbGUiOiJjb25lLWdlb21ldHJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRydW5jYXRlZENvbmVHZW9tZXRyeSBmcm9tICcuL3RydW5jYXRlZC1jb25lLWdlb21ldHJ5JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29uZUdlb21ldHJ5IGV4dGVuZHMgVHJ1bmNhdGVkQ29uZUdlb21ldHJ5IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgY29uc3Qge3JhZGl1cyA9IDEsIGNhcCA9IHRydWV9ID0gb3B0cztcbiAgICBzdXBlcihPYmplY3QuYXNzaWduKHt9LCBvcHRzLCB7XG4gICAgICB0b3BSYWRpdXM6IDAsXG4gICAgICB0b3BDYXA6IEJvb2xlYW4oY2FwKSxcbiAgICAgIGJvdHRvbUNhcDogQm9vbGVhbihjYXApLFxuICAgICAgYm90dG9tUmFkaXVzOiByYWRpdXNcbiAgICB9KSk7XG4gIH1cbn1cbiJdfQ==