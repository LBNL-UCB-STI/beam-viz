// Copyright (c) 2015 Uber Technologies, Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable */
'use strict';

var PI = Math.PI;
var pow = Math.pow;
var tan = Math.tan;
var log = Math.log;
var atan = Math.atan;
var exp = Math.exp;
var DEGREES_TO_RADIANS = PI / 180;
var RADIANS_TO_DEGREES = 180 / PI;
function radians(value) {
  return value * DEGREES_TO_RADIANS;
}
function degrees(value) {
  return value * RADIANS_TO_DEGREES;
}
// see: https://en.wikipedia.org/wiki/Web_Mercator
function ViewportMercator() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var scale = (opts.tileSize || 512) * 0.5 / PI * pow(2, opts.zoom);
  var lamda = radians(opts.longitude);
  var phi = radians(opts.latitude);
  var x = scale * (lamda + PI);
  var y = scale * (PI - log(tan(PI * 0.25 + phi * 0.5)));
  var offsetX = opts.width * 0.5 - x;
  var offsetY = opts.height * 0.5 - y;

  function project(lnglat2) {
    var lamda2 = lnglat2[0] * DEGREES_TO_RADIANS;
    var phi2 = lnglat2[1] * DEGREES_TO_RADIANS;
    var x2 = scale * (lamda2 + PI);
    var y2 = scale * (PI - log(tan(PI * 0.25 + phi2 * 0.5)));
    return [x2 + offsetX, y2 + offsetY];
  }

  function unproject(xy) {
    var x2 = xy[0] - offsetX;
    var y2 = xy[1] - offsetY;
    var lamda2 = x2 / scale - PI;
    var phi2 = 2 * (atan(exp(PI - y2 / scale)) - PI * 0.25);
    return [degrees(lamda2), degrees(phi2)];
  }

  function contains(lnglat2) {
    var xy = project(lnglat2);
    var x = xy[0];
    var y = xy[1];
    return x >= 0 && x <= opts.width && y >= 0 && y <= opts.height;
  }

  return { project: project, unproject: unproject, contains: contains };
}

module.exports = ViewportMercator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9mbGF0LXZpZXdwb3J0LmpzIl0sIm5hbWVzIjpbIlBJIiwiTWF0aCIsInBvdyIsInRhbiIsImxvZyIsImF0YW4iLCJleHAiLCJERUdSRUVTX1RPX1JBRElBTlMiLCJSQURJQU5TX1RPX0RFR1JFRVMiLCJyYWRpYW5zIiwidmFsdWUiLCJkZWdyZWVzIiwiVmlld3BvcnRNZXJjYXRvciIsIm9wdHMiLCJzY2FsZSIsInRpbGVTaXplIiwiem9vbSIsImxhbWRhIiwibG9uZ2l0dWRlIiwicGhpIiwibGF0aXR1ZGUiLCJ4IiwieSIsIm9mZnNldFgiLCJ3aWR0aCIsIm9mZnNldFkiLCJoZWlnaHQiLCJwcm9qZWN0IiwibG5nbGF0MiIsImxhbWRhMiIsInBoaTIiLCJ4MiIsInkyIiwidW5wcm9qZWN0IiwieHkiLCJjb250YWlucyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQSxLQUFLQyxLQUFLRCxFQUFkO0FBQ0EsSUFBSUUsTUFBTUQsS0FBS0MsR0FBZjtBQUNBLElBQUlDLE1BQU1GLEtBQUtFLEdBQWY7QUFDQSxJQUFJQyxNQUFNSCxLQUFLRyxHQUFmO0FBQ0EsSUFBSUMsT0FBT0osS0FBS0ksSUFBaEI7QUFDQSxJQUFJQyxNQUFNTCxLQUFLSyxHQUFmO0FBQ0EsSUFBSUMscUJBQXFCUCxLQUFLLEdBQTlCO0FBQ0EsSUFBSVEscUJBQXFCLE1BQU1SLEVBQS9CO0FBQ0EsU0FBU1MsT0FBVCxDQUFpQkMsS0FBakIsRUFBd0I7QUFDdEIsU0FBT0EsUUFBUUgsa0JBQWY7QUFDRDtBQUNELFNBQVNJLE9BQVQsQ0FBaUJELEtBQWpCLEVBQXdCO0FBQ3RCLFNBQU9BLFFBQVFGLGtCQUFmO0FBQ0Q7QUFDRDtBQUNBLFNBQVNJLGdCQUFULEdBQXFDO0FBQUEsTUFBWEMsSUFBVyx1RUFBSixFQUFJOztBQUNuQyxNQUFJQyxRQUFRLENBQUNELEtBQUtFLFFBQUwsSUFBaUIsR0FBbEIsSUFBeUIsR0FBekIsR0FBK0JmLEVBQS9CLEdBQW9DRSxJQUFJLENBQUosRUFBT1csS0FBS0csSUFBWixDQUFoRDtBQUNBLE1BQUlDLFFBQVFSLFFBQVFJLEtBQUtLLFNBQWIsQ0FBWjtBQUNBLE1BQUlDLE1BQU1WLFFBQVFJLEtBQUtPLFFBQWIsQ0FBVjtBQUNBLE1BQUlDLElBQUlQLFNBQVNHLFFBQVFqQixFQUFqQixDQUFSO0FBQ0EsTUFBSXNCLElBQUlSLFNBQVNkLEtBQUtJLElBQUlELElBQUlILEtBQUssSUFBTCxHQUFZbUIsTUFBTSxHQUF0QixDQUFKLENBQWQsQ0FBUjtBQUNBLE1BQUlJLFVBQVVWLEtBQUtXLEtBQUwsR0FBYSxHQUFiLEdBQW1CSCxDQUFqQztBQUNBLE1BQUlJLFVBQVVaLEtBQUthLE1BQUwsR0FBYyxHQUFkLEdBQW9CSixDQUFsQzs7QUFFQSxXQUFTSyxPQUFULENBQWlCQyxPQUFqQixFQUEwQjtBQUN4QixRQUFJQyxTQUFTRCxRQUFRLENBQVIsSUFBYXJCLGtCQUExQjtBQUNBLFFBQUl1QixPQUFPRixRQUFRLENBQVIsSUFBYXJCLGtCQUF4QjtBQUNBLFFBQUl3QixLQUFLakIsU0FBU2UsU0FBUzdCLEVBQWxCLENBQVQ7QUFDQSxRQUFJZ0MsS0FBS2xCLFNBQVNkLEtBQUtJLElBQUlELElBQUlILEtBQUssSUFBTCxHQUFZOEIsT0FBTyxHQUF2QixDQUFKLENBQWQsQ0FBVDtBQUNBLFdBQU8sQ0FBQ0MsS0FBS1IsT0FBTixFQUFlUyxLQUFLUCxPQUFwQixDQUFQO0FBQ0Q7O0FBRUQsV0FBU1EsU0FBVCxDQUFtQkMsRUFBbkIsRUFBdUI7QUFDckIsUUFBSUgsS0FBS0csR0FBRyxDQUFILElBQVFYLE9BQWpCO0FBQ0EsUUFBSVMsS0FBS0UsR0FBRyxDQUFILElBQVFULE9BQWpCO0FBQ0EsUUFBSUksU0FBU0UsS0FBS2pCLEtBQUwsR0FBYWQsRUFBMUI7QUFDQSxRQUFJOEIsT0FBTyxLQUFLekIsS0FBS0MsSUFBSU4sS0FBS2dDLEtBQUtsQixLQUFkLENBQUwsSUFBNkJkLEtBQUssSUFBdkMsQ0FBWDtBQUNBLFdBQU8sQ0FBQ1csUUFBUWtCLE1BQVIsQ0FBRCxFQUFrQmxCLFFBQVFtQixJQUFSLENBQWxCLENBQVA7QUFDRDs7QUFFRCxXQUFTSyxRQUFULENBQWtCUCxPQUFsQixFQUEyQjtBQUN6QixRQUFJTSxLQUFLUCxRQUFRQyxPQUFSLENBQVQ7QUFDQSxRQUFJUCxJQUFJYSxHQUFHLENBQUgsQ0FBUjtBQUNBLFFBQUlaLElBQUlZLEdBQUcsQ0FBSCxDQUFSO0FBQ0EsV0FDRWIsS0FBSyxDQUFMLElBQVVBLEtBQUtSLEtBQUtXLEtBQXBCLElBQ0FGLEtBQUssQ0FETCxJQUNVQSxLQUFLVCxLQUFLYSxNQUZ0QjtBQUlEOztBQUVELFNBQU8sRUFBQ0MsU0FBU0EsT0FBVixFQUFtQk0sV0FBV0EsU0FBOUIsRUFBeUNFLFVBQVVBLFFBQW5ELEVBQVA7QUFDRDs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQnpCLGdCQUFqQiIsImZpbGUiOiJmbGF0LXZpZXdwb3J0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG5cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8qIGVzbGludC1kaXNhYmxlICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQSSA9IE1hdGguUEk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgdGFuID0gTWF0aC50YW47XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgYXRhbiA9IE1hdGguYXRhbjtcbnZhciBleHAgPSBNYXRoLmV4cDtcbnZhciBERUdSRUVTX1RPX1JBRElBTlMgPSBQSSAvIDE4MDtcbnZhciBSQURJQU5TX1RPX0RFR1JFRVMgPSAxODAgLyBQSTtcbmZ1bmN0aW9uIHJhZGlhbnModmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICogREVHUkVFU19UT19SQURJQU5TO1xufVxuZnVuY3Rpb24gZGVncmVlcyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgKiBSQURJQU5TX1RPX0RFR1JFRVM7XG59XG4vLyBzZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dlYl9NZXJjYXRvclxuZnVuY3Rpb24gVmlld3BvcnRNZXJjYXRvcihvcHRzID0ge30pIHtcbiAgdmFyIHNjYWxlID0gKG9wdHMudGlsZVNpemUgfHwgNTEyKSAqIDAuNSAvIFBJICogcG93KDIsIG9wdHMuem9vbSk7XG4gIHZhciBsYW1kYSA9IHJhZGlhbnMob3B0cy5sb25naXR1ZGUpO1xuICB2YXIgcGhpID0gcmFkaWFucyhvcHRzLmxhdGl0dWRlKTtcbiAgdmFyIHggPSBzY2FsZSAqIChsYW1kYSArIFBJKTtcbiAgdmFyIHkgPSBzY2FsZSAqIChQSSAtIGxvZyh0YW4oUEkgKiAwLjI1ICsgcGhpICogMC41KSkpO1xuICB2YXIgb2Zmc2V0WCA9IG9wdHMud2lkdGggKiAwLjUgLSB4O1xuICB2YXIgb2Zmc2V0WSA9IG9wdHMuaGVpZ2h0ICogMC41IC0geTtcblxuICBmdW5jdGlvbiBwcm9qZWN0KGxuZ2xhdDIpIHtcbiAgICB2YXIgbGFtZGEyID0gbG5nbGF0MlswXSAqIERFR1JFRVNfVE9fUkFESUFOUztcbiAgICB2YXIgcGhpMiA9IGxuZ2xhdDJbMV0gKiBERUdSRUVTX1RPX1JBRElBTlM7XG4gICAgdmFyIHgyID0gc2NhbGUgKiAobGFtZGEyICsgUEkpO1xuICAgIHZhciB5MiA9IHNjYWxlICogKFBJIC0gbG9nKHRhbihQSSAqIDAuMjUgKyBwaGkyICogMC41KSkpO1xuICAgIHJldHVybiBbeDIgKyBvZmZzZXRYLCB5MiArIG9mZnNldFldO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5wcm9qZWN0KHh5KSB7XG4gICAgdmFyIHgyID0geHlbMF0gLSBvZmZzZXRYO1xuICAgIHZhciB5MiA9IHh5WzFdIC0gb2Zmc2V0WTtcbiAgICB2YXIgbGFtZGEyID0geDIgLyBzY2FsZSAtIFBJO1xuICAgIHZhciBwaGkyID0gMiAqIChhdGFuKGV4cChQSSAtIHkyIC8gc2NhbGUpKSAtIFBJICogMC4yNSk7XG4gICAgcmV0dXJuIFtkZWdyZWVzKGxhbWRhMiksIGRlZ3JlZXMocGhpMildO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udGFpbnMobG5nbGF0Mikge1xuICAgIHZhciB4eSA9IHByb2plY3QobG5nbGF0Mik7XG4gICAgdmFyIHggPSB4eVswXTtcbiAgICB2YXIgeSA9IHh5WzFdO1xuICAgIHJldHVybiAoXG4gICAgICB4ID49IDAgJiYgeCA8PSBvcHRzLndpZHRoICYmXG4gICAgICB5ID49IDAgJiYgeSA8PSBvcHRzLmhlaWdodFxuICAgICk7XG4gIH1cblxuICByZXR1cm4ge3Byb2plY3Q6IHByb2plY3QsIHVucHJvamVjdDogdW5wcm9qZWN0LCBjb250YWluczogY29udGFpbnN9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdwb3J0TWVyY2F0b3I7XG4iXX0=