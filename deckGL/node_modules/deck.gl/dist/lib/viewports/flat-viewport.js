// Copyright (c) 2015 Uber Technologies, Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable */
'use strict';

var PI = Math.PI;
var pow = Math.pow;
var tan = Math.tan;
var log = Math.log;
var atan = Math.atan;
var exp = Math.exp;
var DEGREES_TO_RADIANS = PI / 180;
var RADIANS_TO_DEGREES = 180 / PI;
function radians(value) {
  return value * DEGREES_TO_RADIANS;
}
function degrees(value) {
  return value * RADIANS_TO_DEGREES;
}
// see: https://en.wikipedia.org/wiki/Web_Mercator
function ViewportMercator() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var scale = (opts.tileSize || 512) * 0.5 / PI * pow(2, opts.zoom);
  var lamda = radians(opts.longitude);
  var phi = radians(opts.latitude);
  var x = scale * (lamda + PI);
  var y = scale * (PI - log(tan(PI * 0.25 + phi * 0.5)));
  var offsetX = opts.width * 0.5 - x;
  var offsetY = opts.height * 0.5 - y;

  function project(lnglat2) {
    var lamda2 = lnglat2[0] * DEGREES_TO_RADIANS;
    var phi2 = lnglat2[1] * DEGREES_TO_RADIANS;
    var x2 = scale * (lamda2 + PI);
    var y2 = scale * (PI - log(tan(PI * 0.25 + phi2 * 0.5)));
    return [x2 + offsetX, y2 + offsetY];
  }

  function unproject(xy) {
    var x2 = xy[0] - offsetX;
    var y2 = xy[1] - offsetY;
    var lamda2 = x2 / scale - PI;
    var phi2 = 2 * (atan(exp(PI - y2 / scale)) - PI * 0.25);
    return [degrees(lamda2), degrees(phi2)];
  }

  function contains(lnglat2) {
    var xy = project(lnglat2);
    var x = xy[0];
    var y = xy[1];
    return x >= 0 && x <= opts.width && y >= 0 && y <= opts.height;
  }

  return { project: project, unproject: unproject, contains: contains };
}

module.exports = ViewportMercator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdmlld3BvcnRzL2ZsYXQtdmlld3BvcnQuanMiXSwibmFtZXMiOlsiUEkiLCJNYXRoIiwicG93IiwidGFuIiwibG9nIiwiYXRhbiIsImV4cCIsIkRFR1JFRVNfVE9fUkFESUFOUyIsIlJBRElBTlNfVE9fREVHUkVFUyIsInJhZGlhbnMiLCJ2YWx1ZSIsImRlZ3JlZXMiLCJWaWV3cG9ydE1lcmNhdG9yIiwib3B0cyIsInNjYWxlIiwidGlsZVNpemUiLCJ6b29tIiwibGFtZGEiLCJsb25naXR1ZGUiLCJwaGkiLCJsYXRpdHVkZSIsIngiLCJ5Iiwib2Zmc2V0WCIsIndpZHRoIiwib2Zmc2V0WSIsImhlaWdodCIsInByb2plY3QiLCJsbmdsYXQyIiwibGFtZGEyIiwicGhpMiIsIngyIiwieTIiLCJ1bnByb2plY3QiLCJ4eSIsImNvbnRhaW5zIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUlBLEtBQUtDLEtBQUtELEVBQWQ7QUFDQSxJQUFJRSxNQUFNRCxLQUFLQyxHQUFmO0FBQ0EsSUFBSUMsTUFBTUYsS0FBS0UsR0FBZjtBQUNBLElBQUlDLE1BQU1ILEtBQUtHLEdBQWY7QUFDQSxJQUFJQyxPQUFPSixLQUFLSSxJQUFoQjtBQUNBLElBQUlDLE1BQU1MLEtBQUtLLEdBQWY7QUFDQSxJQUFJQyxxQkFBcUJQLEtBQUssR0FBOUI7QUFDQSxJQUFJUSxxQkFBcUIsTUFBTVIsRUFBL0I7QUFDQSxTQUFTUyxPQUFULENBQWlCQyxLQUFqQixFQUF3QjtBQUN0QixTQUFPQSxRQUFRSCxrQkFBZjtBQUNEO0FBQ0QsU0FBU0ksT0FBVCxDQUFpQkQsS0FBakIsRUFBd0I7QUFDdEIsU0FBT0EsUUFBUUYsa0JBQWY7QUFDRDtBQUNEO0FBQ0EsU0FBU0ksZ0JBQVQsR0FBcUM7QUFBQSxNQUFYQyxJQUFXLHVFQUFKLEVBQUk7O0FBQ25DLE1BQUlDLFFBQVEsQ0FBQ0QsS0FBS0UsUUFBTCxJQUFpQixHQUFsQixJQUF5QixHQUF6QixHQUErQmYsRUFBL0IsR0FBb0NFLElBQUksQ0FBSixFQUFPVyxLQUFLRyxJQUFaLENBQWhEO0FBQ0EsTUFBSUMsUUFBUVIsUUFBUUksS0FBS0ssU0FBYixDQUFaO0FBQ0EsTUFBSUMsTUFBTVYsUUFBUUksS0FBS08sUUFBYixDQUFWO0FBQ0EsTUFBSUMsSUFBSVAsU0FBU0csUUFBUWpCLEVBQWpCLENBQVI7QUFDQSxNQUFJc0IsSUFBSVIsU0FBU2QsS0FBS0ksSUFBSUQsSUFBSUgsS0FBSyxJQUFMLEdBQVltQixNQUFNLEdBQXRCLENBQUosQ0FBZCxDQUFSO0FBQ0EsTUFBSUksVUFBVVYsS0FBS1csS0FBTCxHQUFhLEdBQWIsR0FBbUJILENBQWpDO0FBQ0EsTUFBSUksVUFBVVosS0FBS2EsTUFBTCxHQUFjLEdBQWQsR0FBb0JKLENBQWxDOztBQUVBLFdBQVNLLE9BQVQsQ0FBaUJDLE9BQWpCLEVBQTBCO0FBQ3hCLFFBQUlDLFNBQVNELFFBQVEsQ0FBUixJQUFhckIsa0JBQTFCO0FBQ0EsUUFBSXVCLE9BQU9GLFFBQVEsQ0FBUixJQUFhckIsa0JBQXhCO0FBQ0EsUUFBSXdCLEtBQUtqQixTQUFTZSxTQUFTN0IsRUFBbEIsQ0FBVDtBQUNBLFFBQUlnQyxLQUFLbEIsU0FBU2QsS0FBS0ksSUFBSUQsSUFBSUgsS0FBSyxJQUFMLEdBQVk4QixPQUFPLEdBQXZCLENBQUosQ0FBZCxDQUFUO0FBQ0EsV0FBTyxDQUFDQyxLQUFLUixPQUFOLEVBQWVTLEtBQUtQLE9BQXBCLENBQVA7QUFDRDs7QUFFRCxXQUFTUSxTQUFULENBQW1CQyxFQUFuQixFQUF1QjtBQUNyQixRQUFJSCxLQUFLRyxHQUFHLENBQUgsSUFBUVgsT0FBakI7QUFDQSxRQUFJUyxLQUFLRSxHQUFHLENBQUgsSUFBUVQsT0FBakI7QUFDQSxRQUFJSSxTQUFTRSxLQUFLakIsS0FBTCxHQUFhZCxFQUExQjtBQUNBLFFBQUk4QixPQUFPLEtBQUt6QixLQUFLQyxJQUFJTixLQUFLZ0MsS0FBS2xCLEtBQWQsQ0FBTCxJQUE2QmQsS0FBSyxJQUF2QyxDQUFYO0FBQ0EsV0FBTyxDQUFDVyxRQUFRa0IsTUFBUixDQUFELEVBQWtCbEIsUUFBUW1CLElBQVIsQ0FBbEIsQ0FBUDtBQUNEOztBQUVELFdBQVNLLFFBQVQsQ0FBa0JQLE9BQWxCLEVBQTJCO0FBQ3pCLFFBQUlNLEtBQUtQLFFBQVFDLE9BQVIsQ0FBVDtBQUNBLFFBQUlQLElBQUlhLEdBQUcsQ0FBSCxDQUFSO0FBQ0EsUUFBSVosSUFBSVksR0FBRyxDQUFILENBQVI7QUFDQSxXQUNFYixLQUFLLENBQUwsSUFBVUEsS0FBS1IsS0FBS1csS0FBcEIsSUFDQUYsS0FBSyxDQURMLElBQ1VBLEtBQUtULEtBQUthLE1BRnRCO0FBSUQ7O0FBRUQsU0FBTyxFQUFDQyxTQUFTQSxPQUFWLEVBQW1CTSxXQUFXQSxTQUE5QixFQUF5Q0UsVUFBVUEsUUFBbkQsRUFBUDtBQUNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCekIsZ0JBQWpCIiwiZmlsZSI6ImZsYXQtdmlld3BvcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cblxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLyogZXNsaW50LWRpc2FibGUgKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFBJID0gTWF0aC5QSTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciB0YW4gPSBNYXRoLnRhbjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBhdGFuID0gTWF0aC5hdGFuO1xudmFyIGV4cCA9IE1hdGguZXhwO1xudmFyIERFR1JFRVNfVE9fUkFESUFOUyA9IFBJIC8gMTgwO1xudmFyIFJBRElBTlNfVE9fREVHUkVFUyA9IDE4MCAvIFBJO1xuZnVuY3Rpb24gcmFkaWFucyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgKiBERUdSRUVTX1RPX1JBRElBTlM7XG59XG5mdW5jdGlvbiBkZWdyZWVzKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAqIFJBRElBTlNfVE9fREVHUkVFUztcbn1cbi8vIHNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2ViX01lcmNhdG9yXG5mdW5jdGlvbiBWaWV3cG9ydE1lcmNhdG9yKG9wdHMgPSB7fSkge1xuICB2YXIgc2NhbGUgPSAob3B0cy50aWxlU2l6ZSB8fCA1MTIpICogMC41IC8gUEkgKiBwb3coMiwgb3B0cy56b29tKTtcbiAgdmFyIGxhbWRhID0gcmFkaWFucyhvcHRzLmxvbmdpdHVkZSk7XG4gIHZhciBwaGkgPSByYWRpYW5zKG9wdHMubGF0aXR1ZGUpO1xuICB2YXIgeCA9IHNjYWxlICogKGxhbWRhICsgUEkpO1xuICB2YXIgeSA9IHNjYWxlICogKFBJIC0gbG9nKHRhbihQSSAqIDAuMjUgKyBwaGkgKiAwLjUpKSk7XG4gIHZhciBvZmZzZXRYID0gb3B0cy53aWR0aCAqIDAuNSAtIHg7XG4gIHZhciBvZmZzZXRZID0gb3B0cy5oZWlnaHQgKiAwLjUgLSB5O1xuXG4gIGZ1bmN0aW9uIHByb2plY3QobG5nbGF0Mikge1xuICAgIHZhciBsYW1kYTIgPSBsbmdsYXQyWzBdICogREVHUkVFU19UT19SQURJQU5TO1xuICAgIHZhciBwaGkyID0gbG5nbGF0MlsxXSAqIERFR1JFRVNfVE9fUkFESUFOUztcbiAgICB2YXIgeDIgPSBzY2FsZSAqIChsYW1kYTIgKyBQSSk7XG4gICAgdmFyIHkyID0gc2NhbGUgKiAoUEkgLSBsb2codGFuKFBJICogMC4yNSArIHBoaTIgKiAwLjUpKSk7XG4gICAgcmV0dXJuIFt4MiArIG9mZnNldFgsIHkyICsgb2Zmc2V0WV07XG4gIH1cblxuICBmdW5jdGlvbiB1bnByb2plY3QoeHkpIHtcbiAgICB2YXIgeDIgPSB4eVswXSAtIG9mZnNldFg7XG4gICAgdmFyIHkyID0geHlbMV0gLSBvZmZzZXRZO1xuICAgIHZhciBsYW1kYTIgPSB4MiAvIHNjYWxlIC0gUEk7XG4gICAgdmFyIHBoaTIgPSAyICogKGF0YW4oZXhwKFBJIC0geTIgLyBzY2FsZSkpIC0gUEkgKiAwLjI1KTtcbiAgICByZXR1cm4gW2RlZ3JlZXMobGFtZGEyKSwgZGVncmVlcyhwaGkyKV07XG4gIH1cblxuICBmdW5jdGlvbiBjb250YWlucyhsbmdsYXQyKSB7XG4gICAgdmFyIHh5ID0gcHJvamVjdChsbmdsYXQyKTtcbiAgICB2YXIgeCA9IHh5WzBdO1xuICAgIHZhciB5ID0geHlbMV07XG4gICAgcmV0dXJuIChcbiAgICAgIHggPj0gMCAmJiB4IDw9IG9wdHMud2lkdGggJiZcbiAgICAgIHkgPj0gMCAmJiB5IDw9IG9wdHMuaGVpZ2h0XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB7cHJvamVjdDogcHJvamVjdCwgdW5wcm9qZWN0OiB1bnByb2plY3QsIGNvbnRhaW5zOiBjb250YWluc307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVmlld3BvcnRNZXJjYXRvcjtcbiJdfQ==