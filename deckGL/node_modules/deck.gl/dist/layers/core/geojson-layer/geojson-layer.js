'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lib = require('../../../lib');

var _scatterplotLayer = require('../scatterplot-layer/scatterplot-layer');

var _scatterplotLayer2 = _interopRequireDefault(_scatterplotLayer);

var _pathLayer = require('../path-layer/path-layer');

var _pathLayer2 = _interopRequireDefault(_pathLayer);

var _polygonLayer = require('../polygon-layer/polygon-layer');

var _polygonLayer2 = _interopRequireDefault(_polygonLayer);

var _geojson = require('./geojson');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var defaultPointColor = [0xFF, 0x88, 0x00, 0xFF];
var defaultStrokeColor = [0x33, 0x33, 0x33, 0xFF];
var defaultFillColor = [0xBD, 0xE2, 0x7A, 0xFF];

var defaultProps = {
  drawPoints: true,
  drawLines: true,
  drawPolygons: true,
  fillPolygons: true,
  // extrudePolygons: false,
  // wireframe: false,

  // Point accessors
  getPointColor: function getPointColor(f) {
    return (0, _lib.get)(f, 'properties.color') || defaultPointColor;
  },
  getPointSize: function getPointSize(f) {
    return (0, _lib.get)(f, 'properties.size') || 5;
  },

  // Line and polygon outline accessors
  getStrokeColor: function getStrokeColor(f) {
    return (0, _lib.get)(f, 'properties.strokeColor') || defaultStrokeColor;
  },
  getStrokeWidth: function getStrokeWidth(f) {
    return (0, _lib.get)(f, 'properties.strokeWidth') || 1;
  },

  // Polygon fill accessors
  getFillColor: function getFillColor(f) {
    return (0, _lib.get)(f, 'properties.fillColor') || defaultFillColor;
  },

  // Polygon extrusion accessor
  getElevation: function getElevation(f) {
    return 1000;
  },
  fp64: false
};

var getCoordinates = function getCoordinates(f) {
  return (0, _lib.get)(f, 'geometry.coordinates');
};

var GeoJsonLayer = function (_CompositeLayer) {
  _inherits(GeoJsonLayer, _CompositeLayer);

  function GeoJsonLayer() {
    _classCallCheck(this, GeoJsonLayer);

    return _possibleConstructorReturn(this, (GeoJsonLayer.__proto__ || Object.getPrototypeOf(GeoJsonLayer)).apply(this, arguments));
  }

  _createClass(GeoJsonLayer, [{
    key: 'initializeState',
    value: function initializeState() {
      this.state = {
        subLayers: null
      };
    }
  }, {
    key: 'updateState',
    value: function updateState(_ref) {
      var oldProps = _ref.oldProps,
          props = _ref.props,
          changeFlags = _ref.changeFlags;

      if (changeFlags.dataChanged) {
        var data = this.props.data;

        var features = (0, _geojson.getGeojsonFeatures)(data);
        this.state.subLayers = (0, _geojson.separateGeojsonFeatures)(features);
      }
    }
  }, {
    key: '_onHoverSubLayer',
    value: function _onHoverSubLayer(info) {
      info.object = info.object && info.object.feature || info.object;
      this.props.onHover(info);
    }
  }, {
    key: '_onClickSubLayer',
    value: function _onClickSubLayer(info) {
      info.object = info.object && info.object.feature || info.object;
      this.props.onClick(info);
    }
  }, {
    key: 'renderLayers',
    value: function renderLayers() {
      var _state$subLayers = this.state.subLayers,
          pointFeatures = _state$subLayers.pointFeatures,
          lineFeatures = _state$subLayers.lineFeatures,
          polygonFeatures = _state$subLayers.polygonFeatures,
          polygonOutlineFeatures = _state$subLayers.polygonOutlineFeatures;
      var _props = this.props,
          id = _props.id,
          getPointColor = _props.getPointColor,
          getPointSize = _props.getPointSize,
          getStrokeColor = _props.getStrokeColor,
          getStrokeWidth = _props.getStrokeWidth,
          getFillColor = _props.getFillColor,
          getElevation = _props.getElevation;
      var _props2 = this.props,
          extruded = _props2.extruded,
          wireframe = _props2.wireframe;
      var _props3 = this.props,
          drawPoints = _props3.drawPoints,
          drawLines = _props3.drawLines,
          drawPolygons = _props3.drawPolygons,
          fillPolygons = _props3.fillPolygons;

      drawPoints = drawPoints && pointFeatures && pointFeatures.length > 0;
      drawLines = drawLines && lineFeatures && lineFeatures.length > 0;
      drawPolygons = drawPolygons && polygonOutlineFeatures && polygonOutlineFeatures.length > 0;
      fillPolygons = fillPolygons && polygonFeatures && polygonFeatures.length > 0;

      var onHover = this._onHoverSubLayer.bind(this);
      var onClick = this._onClickSubLayer.bind(this);

      // Filled Polygon Layer
      var polygonFillLayer = fillPolygons && new _polygonLayer2.default(Object.assign({}, this.props, {
        id: id + '-polygon-fill',
        data: polygonFeatures,
        getPolygon: getCoordinates,
        getElevation: getElevation,
        getColor: getFillColor,
        extruded: extruded,
        wireframe: false,
        onHover: onHover,
        onClick: onClick,
        updateTriggers: {
          getElevation: this.props.updateTriggers.getElevation,
          getColor: this.props.updateTriggers.getFillColor
        }
      }));

      // Polygon outline or wireframe
      var polygonOutlineLayer = null;
      if (drawPolygons && extruded && wireframe) {
        polygonOutlineLayer = new _polygonLayer2.default(Object.assign({}, this.props, {
          id: id + '-polygon-wireframe',
          data: polygonFeatures,
          getPolygon: getCoordinates,
          getElevation: getElevation,
          getColor: getStrokeColor,
          extruded: true,
          wireframe: true,
          onHover: onHover,
          onClick: onClick,
          updateTriggers: {
            getColor: this.props.updateTriggers.getStrokeColor
          }
        }));
      } else if (drawPolygons) {
        polygonOutlineLayer = new _pathLayer2.default(Object.assign({}, this.props, {
          id: id + '-polygon-outline',
          data: polygonOutlineFeatures,
          getPath: getCoordinates,
          getColor: getStrokeColor,
          getStrokeWidth: getStrokeWidth,
          onHover: onHover,
          onClick: onClick,
          updateTriggers: {
            getColor: this.props.updateTriggers.getStrokeColor,
            getStrokeWidth: this.props.updateTriggers.getStrokeWidth
          }
        }));
      }

      var lineLayer = drawLines && new _pathLayer2.default(Object.assign({}, this.props, {
        id: id + '-line-paths',
        data: lineFeatures,
        getPath: getCoordinates,
        getColor: getStrokeColor,
        getStrokeWidth: getStrokeWidth,
        onHover: onHover,
        onClick: onClick,
        updateTriggers: {
          getColor: this.props.updateTriggers.getStrokeColor,
          getStrokeWidth: this.props.updateTriggers.getStrokeWidth
        }
      }));

      var pointLayer = drawPoints && new _scatterplotLayer2.default(Object.assign({}, this.props, {
        id: id + '-points',
        data: pointFeatures,
        getPosition: getCoordinates,
        getColor: getPointColor,
        getRadius: getPointSize,
        onHover: onHover,
        onClick: onClick,
        updateTriggers: {
          getColor: this.props.updateTriggers.getPointColor,
          getRadius: this.props.updateTriggers.getPointSize
        },
        fp64: this.props.fp64
      }));

      return [polygonFillLayer, polygonOutlineLayer, lineLayer, pointLayer].filter(Boolean);
    }
  }]);

  return GeoJsonLayer;
}(_lib.CompositeLayer);

exports.default = GeoJsonLayer;


GeoJsonLayer.layerName = 'GeoJsonLayer';
GeoJsonLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;base64,