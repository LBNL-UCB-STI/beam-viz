'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _scatterplotLayer = require('../../core/scatterplot-layer/scatterplot-layer');

var _scatterplotLayer2 = _interopRequireDefault(_scatterplotLayer);

var _fp = require('../../../lib/utils/fp64');

var _path = require('path');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var ScatterplotLayer64 = function (_ScatterplotLayer) {
  _inherits(ScatterplotLayer64, _ScatterplotLayer);

  function ScatterplotLayer64() {
    _classCallCheck(this, ScatterplotLayer64);

    return _possibleConstructorReturn(this, (ScatterplotLayer64.__proto__ || Object.getPrototypeOf(ScatterplotLayer64)).apply(this, arguments));
  }

  _createClass(ScatterplotLayer64, [{
    key: 'getShaders',


    // Override the super class vertex shader
    value: function getShaders(id) {
      return {
        vs: '// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n#define SHADER_NAME scatterplot-layer-64-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec4 instancePositions64xy;\nattribute vec2 instancePositions64z;\nattribute float instanceRadius;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\n\n// Only one-dimensional arrays may be declared in GLSL ES 1.0. specs p.24\nuniform float opacity;\nuniform float radiusScale;\nuniform float radiusMinPixels;\nuniform float radiusMaxPixels;\nuniform float renderPickingBuffer;\nuniform float outline;\nuniform float strokeWidth;\n\nvarying vec4 vColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\n\nvoid main(void) {\n  // Multiply out radius and clamp to limits\n  float outerRadiusPixels = clamp(\n    project_scale(radiusScale * instanceRadius),\n    radiusMinPixels, radiusMaxPixels\n  );\n\n  // outline is centered at the radius\n  // outer radius needs to offset by half stroke width\n  outerRadiusPixels += outline * strokeWidth / 2.0;\n\n  // position on the containing square in [-1, 1] space\n  unitPosition = positions.xy;\n  // 0 - solid circle, 1 - stroke with lineWidth=0\n  innerUnitRadius = outline * (1.0 - strokeWidth / outerRadiusPixels);\n\n  vec2 projected_coord_xy[2];\n  project_position_fp64(instancePositions64xy, projected_coord_xy);\n\n  vec2 vertex_pos_localspace[4];\n  vec4_fp64(vec4(positions * outerRadiusPixels, 0.0), vertex_pos_localspace);\n\n  vec2 vertex_pos_modelspace[4];\n  vertex_pos_modelspace[0] = sum_fp64(vertex_pos_localspace[0], projected_coord_xy[0]);\n  vertex_pos_modelspace[1] = sum_fp64(vertex_pos_localspace[1], projected_coord_xy[1]);\n  vertex_pos_modelspace[2] = sum_fp64(vertex_pos_localspace[2], vec2(instancePositions64z.x + 1.0, instancePositions64z.y));\n  vertex_pos_modelspace[3] = vec2(1.0, 0.0);\n\n  gl_Position = project_to_clipspace_fp64(vertex_pos_modelspace);\n\n  // Apply opacity to instance color, or return instance picking color\n  vec4 color = vec4(instanceColors.rgb, instanceColors.a * opacity) / 255.;\n  vec4 pickingColor = vec4(instancePickingColors / 255., 1.);\n  vColor = mix(color, pickingColor, renderPickingBuffer);\n}\n',
        fs: _get(ScatterplotLayer64.prototype.__proto__ || Object.getPrototypeOf(ScatterplotLayer64.prototype), 'getShaders', this).call(this).fs,
        fp64: true,
        project64: true
      };
    }
  }, {
    key: 'initializeState',
    value: function initializeState() {
      // We use the model and all attributes except "instancePositions" of the base layer
      _get(ScatterplotLayer64.prototype.__proto__ || Object.getPrototypeOf(ScatterplotLayer64.prototype), 'initializeState', this).call(this);

      // Add the 64 bit positions
      var attributeManager = this.state.attributeManager;

      attributeManager.addInstanced({
        instancePositions64xy: { size: 4, update: this.calculateInstancePositions64xy },
        instancePositions64z: { size: 2, update: this.calculateInstancePositions64z }
      });
    }
  }, {
    key: 'calculateInstancePositions64xy',
    value: function calculateInstancePositions64xy(attribute) {
      var _props = this.props,
          data = _props.data,
          getPosition = _props.getPosition;
      var value = attribute.value,
          size = attribute.size;

      var i = 0;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var point = _step.value;

          var position = getPosition(point);

          var _fp64ify = (0, _fp.fp64ify)(position[0]);

          var _fp64ify2 = _slicedToArray(_fp64ify, 2);

          value[i + 0] = _fp64ify2[0];
          value[i + 1] = _fp64ify2[1];

          var _fp64ify3 = (0, _fp.fp64ify)(position[1]);

          var _fp64ify4 = _slicedToArray(_fp64ify3, 2);

          value[i + 2] = _fp64ify4[0];
          value[i + 3] = _fp64ify4[1];

          i += size;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: 'calculateInstancePositions64z',
    value: function calculateInstancePositions64z(attribute) {
      var _props2 = this.props,
          data = _props2.data,
          getPosition = _props2.getPosition;
      var value = attribute.value,
          size = attribute.size;

      var i = 0;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var point = _step2.value;

          var position = getPosition(point);

          var _fp64ify5 = (0, _fp.fp64ify)(position[2] || 0);

          var _fp64ify6 = _slicedToArray(_fp64ify5, 2);

          value[i + 0] = _fp64ify6[0];
          value[i + 1] = _fp64ify6[1];

          i += size;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }]);

  return ScatterplotLayer64;
}(_scatterplotLayer2.default);

exports.default = ScatterplotLayer64;


ScatterplotLayer64.layerName = 'ScatterplotLayer64';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXllcnMvZnA2NC9zY2F0dGVycGxvdC1sYXllci9zY2F0dGVycGxvdC1sYXllci02NC5qcyJdLCJuYW1lcyI6WyJTY2F0dGVycGxvdExheWVyNjQiLCJpZCIsInZzIiwiZnMiLCJmcDY0IiwicHJvamVjdDY0IiwiYXR0cmlidXRlTWFuYWdlciIsInN0YXRlIiwiYWRkSW5zdGFuY2VkIiwiaW5zdGFuY2VQb3NpdGlvbnM2NHh5Iiwic2l6ZSIsInVwZGF0ZSIsImNhbGN1bGF0ZUluc3RhbmNlUG9zaXRpb25zNjR4eSIsImluc3RhbmNlUG9zaXRpb25zNjR6IiwiY2FsY3VsYXRlSW5zdGFuY2VQb3NpdGlvbnM2NHoiLCJhdHRyaWJ1dGUiLCJwcm9wcyIsImRhdGEiLCJnZXRQb3NpdGlvbiIsInZhbHVlIiwiaSIsInBvaW50IiwicG9zaXRpb24iLCJsYXllck5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQW9CQTs7OztBQUNBOztBQUVBOzs7Ozs7OzsrZUF2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBT3FCQSxrQjs7Ozs7Ozs7Ozs7OztBQUVuQjsrQkFDV0MsRSxFQUFJO0FBQ2IsYUFBTztBQUNMQyxvdUdBREs7QUFFTEMsWUFBSSxtSUFBbUJBLEVBRmxCO0FBR0xDLGNBQU0sSUFIRDtBQUlMQyxtQkFBVztBQUpOLE9BQVA7QUFNRDs7O3NDQUVpQjtBQUNoQjtBQUNBOztBQUVBO0FBSmdCLFVBS1RDLGdCQUxTLEdBS1csS0FBS0MsS0FMaEIsQ0FLVEQsZ0JBTFM7O0FBTWhCQSx1QkFBaUJFLFlBQWpCLENBQThCO0FBQzVCQywrQkFBdUIsRUFBQ0MsTUFBTSxDQUFQLEVBQVVDLFFBQVEsS0FBS0MsOEJBQXZCLEVBREs7QUFFNUJDLDhCQUFzQixFQUFDSCxNQUFNLENBQVAsRUFBVUMsUUFBUSxLQUFLRyw2QkFBdkI7QUFGTSxPQUE5QjtBQUlEOzs7bURBRThCQyxTLEVBQVc7QUFBQSxtQkFDWixLQUFLQyxLQURPO0FBQUEsVUFDakNDLElBRGlDLFVBQ2pDQSxJQURpQztBQUFBLFVBQzNCQyxXQUQyQixVQUMzQkEsV0FEMkI7QUFBQSxVQUVqQ0MsS0FGaUMsR0FFbEJKLFNBRmtCLENBRWpDSSxLQUZpQztBQUFBLFVBRTFCVCxJQUYwQixHQUVsQkssU0FGa0IsQ0FFMUJMLElBRjBCOztBQUd4QyxVQUFJVSxJQUFJLENBQVI7QUFId0M7QUFBQTtBQUFBOztBQUFBO0FBSXhDLDZCQUFvQkgsSUFBcEIsOEhBQTBCO0FBQUEsY0FBZkksS0FBZTs7QUFDeEIsY0FBTUMsV0FBV0osWUFBWUcsS0FBWixDQUFqQjs7QUFEd0IseUJBRU8saUJBQVFDLFNBQVMsQ0FBVCxDQUFSLENBRlA7O0FBQUE7O0FBRXZCSCxnQkFBTUMsSUFBSSxDQUFWLENBRnVCO0FBRVRELGdCQUFNQyxJQUFJLENBQVYsQ0FGUzs7QUFBQSwwQkFHTyxpQkFBUUUsU0FBUyxDQUFULENBQVIsQ0FIUDs7QUFBQTs7QUFHdkJILGdCQUFNQyxJQUFJLENBQVYsQ0FIdUI7QUFHVEQsZ0JBQU1DLElBQUksQ0FBVixDQUhTOztBQUl4QkEsZUFBS1YsSUFBTDtBQUNEO0FBVHVDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFVekM7OztrREFFNkJLLFMsRUFBVztBQUFBLG9CQUNYLEtBQUtDLEtBRE07QUFBQSxVQUNoQ0MsSUFEZ0MsV0FDaENBLElBRGdDO0FBQUEsVUFDMUJDLFdBRDBCLFdBQzFCQSxXQUQwQjtBQUFBLFVBRWhDQyxLQUZnQyxHQUVqQkosU0FGaUIsQ0FFaENJLEtBRmdDO0FBQUEsVUFFekJULElBRnlCLEdBRWpCSyxTQUZpQixDQUV6QkwsSUFGeUI7O0FBR3ZDLFVBQUlVLElBQUksQ0FBUjtBQUh1QztBQUFBO0FBQUE7O0FBQUE7QUFJdkMsOEJBQW9CSCxJQUFwQixtSUFBMEI7QUFBQSxjQUFmSSxLQUFlOztBQUN4QixjQUFNQyxXQUFXSixZQUFZRyxLQUFaLENBQWpCOztBQUR3QiwwQkFFTyxpQkFBUUMsU0FBUyxDQUFULEtBQWUsQ0FBdkIsQ0FGUDs7QUFBQTs7QUFFdkJILGdCQUFNQyxJQUFJLENBQVYsQ0FGdUI7QUFFVEQsZ0JBQU1DLElBQUksQ0FBVixDQUZTOztBQUd4QkEsZUFBS1YsSUFBTDtBQUNEO0FBUnNDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFTeEM7Ozs7OztrQkE3Q2tCVixrQjs7O0FBZ0RyQkEsbUJBQW1CdUIsU0FBbkIsR0FBK0Isb0JBQS9CIiwiZmlsZSI6InNjYXR0ZXJwbG90LWxheWVyLTY0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE2IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IFNjYXR0ZXJwbG90TGF5ZXIgZnJvbSAnLi4vLi4vY29yZS9zY2F0dGVycGxvdC1sYXllci9zY2F0dGVycGxvdC1sYXllcic7XG5pbXBvcnQge2ZwNjRpZnl9IGZyb20gJy4uLy4uLy4uL2xpYi91dGlscy9mcDY0JztcbmltcG9ydCB7cmVhZEZpbGVTeW5jfSBmcm9tICdmcyc7XG5pbXBvcnQge2pvaW59IGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY2F0dGVycGxvdExheWVyNjQgZXh0ZW5kcyBTY2F0dGVycGxvdExheWVyIHtcblxuICAvLyBPdmVycmlkZSB0aGUgc3VwZXIgY2xhc3MgdmVydGV4IHNoYWRlclxuICBnZXRTaGFkZXJzKGlkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZzOiByZWFkRmlsZVN5bmMoam9pbihfX2Rpcm5hbWUsICcuL3NjYXR0ZXJwbG90LWxheWVyLTY0LXZlcnRleC5nbHNsJyksICd1dGY4JyksXG4gICAgICBmczogc3VwZXIuZ2V0U2hhZGVycygpLmZzLFxuICAgICAgZnA2NDogdHJ1ZSxcbiAgICAgIHByb2plY3Q2NDogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBpbml0aWFsaXplU3RhdGUoKSB7XG4gICAgLy8gV2UgdXNlIHRoZSBtb2RlbCBhbmQgYWxsIGF0dHJpYnV0ZXMgZXhjZXB0IFwiaW5zdGFuY2VQb3NpdGlvbnNcIiBvZiB0aGUgYmFzZSBsYXllclxuICAgIHN1cGVyLmluaXRpYWxpemVTdGF0ZSgpO1xuXG4gICAgLy8gQWRkIHRoZSA2NCBiaXQgcG9zaXRpb25zXG4gICAgY29uc3Qge2F0dHJpYnV0ZU1hbmFnZXJ9ID0gdGhpcy5zdGF0ZTtcbiAgICBhdHRyaWJ1dGVNYW5hZ2VyLmFkZEluc3RhbmNlZCh7XG4gICAgICBpbnN0YW5jZVBvc2l0aW9uczY0eHk6IHtzaXplOiA0LCB1cGRhdGU6IHRoaXMuY2FsY3VsYXRlSW5zdGFuY2VQb3NpdGlvbnM2NHh5fSxcbiAgICAgIGluc3RhbmNlUG9zaXRpb25zNjR6OiB7c2l6ZTogMiwgdXBkYXRlOiB0aGlzLmNhbGN1bGF0ZUluc3RhbmNlUG9zaXRpb25zNjR6fVxuICAgIH0pO1xuICB9XG5cbiAgY2FsY3VsYXRlSW5zdGFuY2VQb3NpdGlvbnM2NHh5KGF0dHJpYnV0ZSkge1xuICAgIGNvbnN0IHtkYXRhLCBnZXRQb3NpdGlvbn0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHt2YWx1ZSwgc2l6ZX0gPSBhdHRyaWJ1dGU7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoY29uc3QgcG9pbnQgb2YgZGF0YSkge1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRQb3NpdGlvbihwb2ludCk7XG4gICAgICBbdmFsdWVbaSArIDBdLCB2YWx1ZVtpICsgMV1dID0gZnA2NGlmeShwb3NpdGlvblswXSk7XG4gICAgICBbdmFsdWVbaSArIDJdLCB2YWx1ZVtpICsgM11dID0gZnA2NGlmeShwb3NpdGlvblsxXSk7XG4gICAgICBpICs9IHNpemU7XG4gICAgfVxuICB9XG5cbiAgY2FsY3VsYXRlSW5zdGFuY2VQb3NpdGlvbnM2NHooYXR0cmlidXRlKSB7XG4gICAgY29uc3Qge2RhdGEsIGdldFBvc2l0aW9ufSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge3ZhbHVlLCBzaXplfSA9IGF0dHJpYnV0ZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yIChjb25zdCBwb2ludCBvZiBkYXRhKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFBvc2l0aW9uKHBvaW50KTtcbiAgICAgIFt2YWx1ZVtpICsgMF0sIHZhbHVlW2kgKyAxXV0gPSBmcDY0aWZ5KHBvc2l0aW9uWzJdIHx8IDApO1xuICAgICAgaSArPSBzaXplO1xuICAgIH1cbiAgfVxufVxuXG5TY2F0dGVycGxvdExheWVyNjQubGF5ZXJOYW1lID0gJ1NjYXR0ZXJwbG90TGF5ZXI2NCc7XG4iXX0=