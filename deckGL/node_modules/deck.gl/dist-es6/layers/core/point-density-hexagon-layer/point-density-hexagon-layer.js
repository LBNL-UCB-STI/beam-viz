var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import { Layer } from '../../../lib';
import HexagonLayer from '../hexagon-layer/hexagon-layer';
import { log } from '../../../lib/utils';

import { ordinalScale, linearScale } from '../../../utils/scale-utils';
import { defaultColorRange } from '../../../utils/color-utils';
import { pointToHexbin } from './hexagon-aggregator';

var defaultRadius = 1000;
var defaultCoverage = 1;
var defaultElevationRange = [0, 1000];
var defaultElevationScale = 1;
var defaultAggregator = pointToHexbin;

var defaultProps = {
  colorRange: defaultColorRange,
  elevationRange: defaultElevationRange,
  elevationScale: defaultElevationScale,
  radius: defaultRadius,
  coverage: defaultCoverage,
  hexagonAggregator: defaultAggregator,
  getPosition: function getPosition(x) {
    return x.position;
  }
};

function noop() {}

function _needsReProjectPoints(oldProps, props) {
  return oldProps.radius !== props.radius;
}

function _getCountRange(hexagons) {
  return [Math.min.apply(null, hexagons.map(function (bin) {
    return bin.points.length;
  })), Math.max.apply(null, hexagons.map(function (bin) {
    return bin.points.length;
  }))];
}

var PointDensityHexagonLayer = function (_Layer) {
  _inherits(PointDensityHexagonLayer, _Layer);

  function PointDensityHexagonLayer(props) {
    _classCallCheck(this, PointDensityHexagonLayer);

    if (!props.radius) {
      log.once(0, 'PointDensityHexagonLayer: radius in meter is needed to aggregate points into ' + 'hexagonal bins, Now using 1000 meter as default');

      props.radius = defaultRadius;
    }

    return _possibleConstructorReturn(this, (PointDensityHexagonLayer.__proto__ || Object.getPrototypeOf(PointDensityHexagonLayer)).call(this, props));
  }

  _createClass(PointDensityHexagonLayer, [{
    key: 'initializeState',
    value: function initializeState() {
      this.state = {
        hexagons: [],
        countRange: null,
        pickedCell: null
      };
    }
  }, {
    key: 'updateState',
    value: function updateState(_ref) {
      var oldProps = _ref.oldProps,
          props = _ref.props,
          changeFlags = _ref.changeFlags;

      if (changeFlags.dataChanged || _needsReProjectPoints(oldProps, props)) {
        var hexagonAggregator = this.props.hexagonAggregator;
        var viewport = this.context.viewport;


        var hexagons = hexagonAggregator(this.props, viewport);
        var countRange = _getCountRange(hexagons);

        Object.assign(this.state, { hexagons: hexagons, countRange: countRange });
      }
    }
  }, {
    key: 'getPickingInfo',
    value: function getPickingInfo(opts) {
      var info = _get(PointDensityHexagonLayer.prototype.__proto__ || Object.getPrototypeOf(PointDensityHexagonLayer.prototype), 'getPickingInfo', this).call(this, opts);
      var pickedCell = this.state.pickedCell;

      return Object.assign(info, {
        layer: this,
        // override index with cell index
        index: pickedCell ? pickedCell.index : -1,
        picked: Boolean(pickedCell),
        // override object with picked cell
        object: pickedCell
      });
    }
  }, {
    key: '_onHoverSublayer',
    value: function _onHoverSublayer(info) {

      this.state.pickedCell = info.picked && info.index > -1 ? this.state.hexagons[info.index] : null;
    }
  }, {
    key: '_onGetSublayerColor',
    value: function _onGetSublayerColor(cell) {
      var colorRange = this.props.colorRange;

      var colorDomain = this.props.colorDomain || this.state.countRange;

      return ordinalScale(colorDomain, colorRange, cell.points.length);
    }
  }, {
    key: '_onGetSublayerElevation',
    value: function _onGetSublayerElevation(cell) {
      var elevationRange = this.props.elevationRange;

      var elevationDomain = this.props.elevationDomain || [0, this.state.countRange[1]];
      return linearScale(elevationDomain, elevationRange, cell.points.length);
    }
  }, {
    key: 'renderLayers',
    value: function renderLayers() {
      var _props = this.props,
          id = _props.id,
          radius = _props.radius;


      return new HexagonLayer(Object.assign({}, this.props, {
        id: id + '-density-hexagon',
        data: this.state.hexagons,
        radius: radius,
        angle: Math.PI,
        getColor: this._onGetSublayerColor.bind(this),
        getElevation: this._onGetSublayerElevation.bind(this),
        // Override user's onHover and onClick props
        onHover: this._onHoverSublayer.bind(this),
        onClick: noop,
        updateTriggers: {
          getColor: { colorRange: this.props.colorRange },
          getElevation: { elevationRange: this.props.elevationRange }
        }
      }));
    }
  }]);

  return PointDensityHexagonLayer;
}(Layer);

export default PointDensityHexagonLayer;


PointDensityHexagonLayer.layerName = 'PointDensityHexagonLayer';
PointDensityHexagonLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;base64,