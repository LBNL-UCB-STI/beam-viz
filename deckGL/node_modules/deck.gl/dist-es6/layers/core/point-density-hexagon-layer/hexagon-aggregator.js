import { hexbin } from 'd3-hexbin';

/**
 * Use d3-hexbin to performs hexagonal binning from geo points to hexagons
 * @param {Array} data - array of points
 * @param {Number} radius - hexagon radius in meter
 * @param {function} getPosition - get points lon lat
 * @param {Object} viewport - current viewport object

 * @return {Object} - hexagons and countRange
 */
export function pointToHexbin(_ref, viewport) {
  var data = _ref.data,
      radius = _ref.radius,
      getPosition = _ref.getPosition;

  // get hexagon radius in mercator world unit
  var radiusInPixel = getRadiusInPixel(radius, viewport);

  // add world space coordinates to points
  var screenPoints = data.map(function (pt) {
    return Object.assign({
      screenCoord: viewport.projectFlat(getPosition(pt))
    }, pt);
  });

  var newHexbin = hexbin().radius(radiusInPixel).x(function (d) {
    return d.screenCoord[0];
  }).y(function (d) {
    return d.screenCoord[1];
  });

  var hexagonBins = newHexbin(screenPoints);

  return hexagonBins.map(function (hex) {
    return {
      centroid: viewport.unprojectFlat([hex.x, hex.y]),
      points: hex
    };
  });
}

/**
 * Get radius in mercator world space coordinates from meter
 * @param {Number} radius - in meter
 * @param {Object} viewport - current viewport object

 * @return {Number} radius in mercator world spcae coordinates
 */
export function getRadiusInPixel(radius, viewport) {
  var _viewport$getDistance = viewport.getDistanceScales(),
      pixelsPerMeter = _viewport$getDistance.pixelsPerMeter;

  // x, y distance should be the same


  return radius * pixelsPerMeter[0];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXllcnMvY29yZS9wb2ludC1kZW5zaXR5LWhleGFnb24tbGF5ZXIvaGV4YWdvbi1hZ2dyZWdhdG9yLmpzIl0sIm5hbWVzIjpbImhleGJpbiIsInBvaW50VG9IZXhiaW4iLCJ2aWV3cG9ydCIsImRhdGEiLCJyYWRpdXMiLCJnZXRQb3NpdGlvbiIsInJhZGl1c0luUGl4ZWwiLCJnZXRSYWRpdXNJblBpeGVsIiwic2NyZWVuUG9pbnRzIiwibWFwIiwiT2JqZWN0IiwiYXNzaWduIiwic2NyZWVuQ29vcmQiLCJwcm9qZWN0RmxhdCIsInB0IiwibmV3SGV4YmluIiwieCIsImQiLCJ5IiwiaGV4YWdvbkJpbnMiLCJjZW50cm9pZCIsInVucHJvamVjdEZsYXQiLCJoZXgiLCJwb2ludHMiLCJnZXREaXN0YW5jZVNjYWxlcyIsInBpeGVsc1Blck1ldGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFRQSxNQUFSLFFBQXFCLFdBQXJCOztBQUVBOzs7Ozs7Ozs7QUFTQSxPQUFPLFNBQVNDLGFBQVQsT0FBb0RDLFFBQXBELEVBQThEO0FBQUEsTUFBdENDLElBQXNDLFFBQXRDQSxJQUFzQztBQUFBLE1BQWhDQyxNQUFnQyxRQUFoQ0EsTUFBZ0M7QUFBQSxNQUF4QkMsV0FBd0IsUUFBeEJBLFdBQXdCOztBQUNuRTtBQUNBLE1BQU1DLGdCQUFnQkMsaUJBQWlCSCxNQUFqQixFQUF5QkYsUUFBekIsQ0FBdEI7O0FBRUE7QUFDQSxNQUFNTSxlQUFlTCxLQUFLTSxHQUFMLENBQVM7QUFBQSxXQUFNQyxPQUFPQyxNQUFQLENBQWM7QUFDaERDLG1CQUFhVixTQUFTVyxXQUFULENBQXFCUixZQUFZUyxFQUFaLENBQXJCO0FBRG1DLEtBQWQsRUFFakNBLEVBRmlDLENBQU47QUFBQSxHQUFULENBQXJCOztBQUlBLE1BQU1DLFlBQVlmLFNBQ2ZJLE1BRGUsQ0FDUkUsYUFEUSxFQUVmVSxDQUZlLENBRWI7QUFBQSxXQUFLQyxFQUFFTCxXQUFGLENBQWMsQ0FBZCxDQUFMO0FBQUEsR0FGYSxFQUdmTSxDQUhlLENBR2I7QUFBQSxXQUFLRCxFQUFFTCxXQUFGLENBQWMsQ0FBZCxDQUFMO0FBQUEsR0FIYSxDQUFsQjs7QUFLQSxNQUFNTyxjQUFjSixVQUFVUCxZQUFWLENBQXBCOztBQUVBLFNBQU9XLFlBQVlWLEdBQVosQ0FBZ0I7QUFBQSxXQUFRO0FBQzdCVyxnQkFBVWxCLFNBQVNtQixhQUFULENBQXVCLENBQUNDLElBQUlOLENBQUwsRUFBUU0sSUFBSUosQ0FBWixDQUF2QixDQURtQjtBQUU3QkssY0FBUUQ7QUFGcUIsS0FBUjtBQUFBLEdBQWhCLENBQVA7QUFJRDs7QUFFRDs7Ozs7OztBQU9BLE9BQU8sU0FBU2YsZ0JBQVQsQ0FBMEJILE1BQTFCLEVBQWtDRixRQUFsQyxFQUE0QztBQUFBLDhCQUV4QkEsU0FBU3NCLGlCQUFULEVBRndCO0FBQUEsTUFFMUNDLGNBRjBDLHlCQUUxQ0EsY0FGMEM7O0FBSWpEOzs7QUFDQSxTQUFPckIsU0FBU3FCLGVBQWUsQ0FBZixDQUFoQjtBQUNEIiwiZmlsZSI6ImhleGFnb24tYWdncmVnYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aGV4YmlufSBmcm9tICdkMy1oZXhiaW4nO1xuXG4vKipcbiAqIFVzZSBkMy1oZXhiaW4gdG8gcGVyZm9ybXMgaGV4YWdvbmFsIGJpbm5pbmcgZnJvbSBnZW8gcG9pbnRzIHRvIGhleGFnb25zXG4gKiBAcGFyYW0ge0FycmF5fSBkYXRhIC0gYXJyYXkgb2YgcG9pbnRzXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkaXVzIC0gaGV4YWdvbiByYWRpdXMgaW4gbWV0ZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGdldFBvc2l0aW9uIC0gZ2V0IHBvaW50cyBsb24gbGF0XG4gKiBAcGFyYW0ge09iamVjdH0gdmlld3BvcnQgLSBjdXJyZW50IHZpZXdwb3J0IG9iamVjdFxuXG4gKiBAcmV0dXJuIHtPYmplY3R9IC0gaGV4YWdvbnMgYW5kIGNvdW50UmFuZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvaW50VG9IZXhiaW4oe2RhdGEsIHJhZGl1cywgZ2V0UG9zaXRpb259LCB2aWV3cG9ydCkge1xuICAvLyBnZXQgaGV4YWdvbiByYWRpdXMgaW4gbWVyY2F0b3Igd29ybGQgdW5pdFxuICBjb25zdCByYWRpdXNJblBpeGVsID0gZ2V0UmFkaXVzSW5QaXhlbChyYWRpdXMsIHZpZXdwb3J0KTtcblxuICAvLyBhZGQgd29ybGQgc3BhY2UgY29vcmRpbmF0ZXMgdG8gcG9pbnRzXG4gIGNvbnN0IHNjcmVlblBvaW50cyA9IGRhdGEubWFwKHB0ID0+IE9iamVjdC5hc3NpZ24oe1xuICAgIHNjcmVlbkNvb3JkOiB2aWV3cG9ydC5wcm9qZWN0RmxhdChnZXRQb3NpdGlvbihwdCkpXG4gIH0sIHB0KSk7XG5cbiAgY29uc3QgbmV3SGV4YmluID0gaGV4YmluKClcbiAgICAucmFkaXVzKHJhZGl1c0luUGl4ZWwpXG4gICAgLngoZCA9PiBkLnNjcmVlbkNvb3JkWzBdKVxuICAgIC55KGQgPT4gZC5zY3JlZW5Db29yZFsxXSk7XG5cbiAgY29uc3QgaGV4YWdvbkJpbnMgPSBuZXdIZXhiaW4oc2NyZWVuUG9pbnRzKTtcblxuICByZXR1cm4gaGV4YWdvbkJpbnMubWFwKGhleCA9PiAoe1xuICAgIGNlbnRyb2lkOiB2aWV3cG9ydC51bnByb2plY3RGbGF0KFtoZXgueCwgaGV4LnldKSxcbiAgICBwb2ludHM6IGhleFxuICB9KSk7XG59XG5cbi8qKlxuICogR2V0IHJhZGl1cyBpbiBtZXJjYXRvciB3b3JsZCBzcGFjZSBjb29yZGluYXRlcyBmcm9tIG1ldGVyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkaXVzIC0gaW4gbWV0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSB2aWV3cG9ydCAtIGN1cnJlbnQgdmlld3BvcnQgb2JqZWN0XG5cbiAqIEByZXR1cm4ge051bWJlcn0gcmFkaXVzIGluIG1lcmNhdG9yIHdvcmxkIHNwY2FlIGNvb3JkaW5hdGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSYWRpdXNJblBpeGVsKHJhZGl1cywgdmlld3BvcnQpIHtcblxuICBjb25zdCB7cGl4ZWxzUGVyTWV0ZXJ9ID0gdmlld3BvcnQuZ2V0RGlzdGFuY2VTY2FsZXMoKTtcblxuICAvLyB4LCB5IGRpc3RhbmNlIHNob3VsZCBiZSB0aGUgc2FtZVxuICByZXR1cm4gcmFkaXVzICogcGl4ZWxzUGVyTWV0ZXJbMF07XG59XG4iXX0=