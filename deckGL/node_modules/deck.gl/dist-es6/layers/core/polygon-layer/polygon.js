import { Container } from '../../../lib/utils';

// Basic polygon support
//
// Handles simple and complex polygons
// Simple polygons are arrays of vertices, implicitly "closed"
// Complex polygons are arrays of simple polygons, with the first polygon
// representing the outer hull and other polygons representing holes

/**
 * Check if this is a non-nested polygon (i.e. the first element of the first element is a number)
 * @param {Array} polygon - either a complex or simple polygon
 * @return {Boolean} - true if the polygon is a simple polygon (i.e. not an array of polygons)
 */
export function isSimple(polygon) {
  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);
}

/**
 * Normalize to ensure that all polygons in a list are complex - simplifies processing
 * @param {Array} polygon - either a complex or a simple polygon
 * @param {Object} opts
 * @param {Object} opts.dimensions - if 3, the coords will be padded with 0's if needed
 * @return {Array} - returns a complex polygons
 */
export function normalize(polygon) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$dimensions = _ref.dimensions,
      dimensions = _ref$dimensions === undefined ? 3 : _ref$dimensions;

  return isSimple(polygon) ? [polygon] : polygon;
}

/**
 * Check if this is a non-nested polygon (i.e. the first element of the first element is a number)
 * @param {Array} polygon - either a complex or simple polygon
 * @return {Boolean} - true if the polygon is a simple polygon (i.e. not an array of polygons)
 */
export function getVertexCount(polygon) {
  return isSimple(polygon) ? Container.count(polygon) : polygon.reduce(function (count, simplePolygon) {
    return count + Container.count(simplePolygon);
  }, 0);
}

// Return number of triangles needed to tesselate the polygon
export function getTriangleCount(polygon) {
  var triangleCount = 0;
  var first = true;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = normalize(polygon)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var simplePolygon = _step.value;

      var size = Container.count(simplePolygon);
      if (first) {
        triangleCount += size > 3 ? size - 3 : 0;
      } else {
        triangleCount += size + 1;
      }
      first = false;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return triangleCount;
}

export function forEachVertex(polygon, visitor) {
  if (isSimple(polygon)) {
    Container.forEach(polygon, visitor);
    return;
  }

  var vertexIndex = 0;
  Container.forEach(polygon, function (simplePolygon) {
    Container.forEach(simplePolygon, function (v, i, p) {
      return visitor(v, vertexIndex, polygon);
    });
    vertexIndex++;
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXllcnMvY29yZS9wb2x5Z29uLWxheWVyL3BvbHlnb24uanMiXSwibmFtZXMiOlsiQ29udGFpbmVyIiwiaXNTaW1wbGUiLCJwb2x5Z29uIiwibGVuZ3RoIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJub3JtYWxpemUiLCJkaW1lbnNpb25zIiwiZ2V0VmVydGV4Q291bnQiLCJjb3VudCIsInJlZHVjZSIsInNpbXBsZVBvbHlnb24iLCJnZXRUcmlhbmdsZUNvdW50IiwidHJpYW5nbGVDb3VudCIsImZpcnN0Iiwic2l6ZSIsImZvckVhY2hWZXJ0ZXgiLCJ2aXNpdG9yIiwiZm9yRWFjaCIsInZlcnRleEluZGV4IiwidiIsImkiLCJwIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFRQSxTQUFSLFFBQXdCLG9CQUF4Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7O0FBS0EsT0FBTyxTQUFTQyxRQUFULENBQWtCQyxPQUFsQixFQUEyQjtBQUNoQyxTQUFPQSxRQUFRQyxNQUFSLElBQWtCLENBQWxCLElBQXVCRCxRQUFRLENBQVIsRUFBV0MsTUFBWCxJQUFxQixDQUE1QyxJQUFpREMsT0FBT0MsUUFBUCxDQUFnQkgsUUFBUSxDQUFSLEVBQVcsQ0FBWCxDQUFoQixDQUF4RDtBQUNEOztBQUVEOzs7Ozs7O0FBT0EsT0FBTyxTQUFTSSxTQUFULENBQW1CSixPQUFuQixFQUFtRDtBQUFBLGlGQUFKLEVBQUk7QUFBQSw2QkFBdEJLLFVBQXNCO0FBQUEsTUFBdEJBLFVBQXNCLG1DQUFULENBQVM7O0FBQ3hELFNBQU9OLFNBQVNDLE9BQVQsSUFBb0IsQ0FBQ0EsT0FBRCxDQUFwQixHQUFnQ0EsT0FBdkM7QUFDRDs7QUFFRDs7Ozs7QUFLQSxPQUFPLFNBQVNNLGNBQVQsQ0FBd0JOLE9BQXhCLEVBQWlDO0FBQ3RDLFNBQU9ELFNBQVNDLE9BQVQsSUFDTEYsVUFBVVMsS0FBVixDQUFnQlAsT0FBaEIsQ0FESyxHQUVMQSxRQUFRUSxNQUFSLENBQWUsVUFBQ0QsS0FBRCxFQUFRRSxhQUFSO0FBQUEsV0FBMEJGLFFBQVFULFVBQVVTLEtBQVYsQ0FBZ0JFLGFBQWhCLENBQWxDO0FBQUEsR0FBZixFQUFpRixDQUFqRixDQUZGO0FBR0Q7O0FBRUQ7QUFDQSxPQUFPLFNBQVNDLGdCQUFULENBQTBCVixPQUExQixFQUFtQztBQUN4QyxNQUFJVyxnQkFBZ0IsQ0FBcEI7QUFDQSxNQUFJQyxRQUFRLElBQVo7QUFGd0M7QUFBQTtBQUFBOztBQUFBO0FBR3hDLHlCQUE0QlIsVUFBVUosT0FBVixDQUE1Qiw4SEFBZ0Q7QUFBQSxVQUFyQ1MsYUFBcUM7O0FBQzlDLFVBQU1JLE9BQU9mLFVBQVVTLEtBQVYsQ0FBZ0JFLGFBQWhCLENBQWI7QUFDQSxVQUFJRyxLQUFKLEVBQVc7QUFDVEQseUJBQWlCRSxPQUFPLENBQVAsR0FBV0EsT0FBTyxDQUFsQixHQUFzQixDQUF2QztBQUNELE9BRkQsTUFFTztBQUNMRix5QkFBaUJFLE9BQU8sQ0FBeEI7QUFDRDtBQUNERCxjQUFRLEtBQVI7QUFDRDtBQVh1QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQVl4QyxTQUFPRCxhQUFQO0FBQ0Q7O0FBRUQsT0FBTyxTQUFTRyxhQUFULENBQXVCZCxPQUF2QixFQUFnQ2UsT0FBaEMsRUFBeUM7QUFDOUMsTUFBSWhCLFNBQVNDLE9BQVQsQ0FBSixFQUF1QjtBQUNyQkYsY0FBVWtCLE9BQVYsQ0FBa0JoQixPQUFsQixFQUEyQmUsT0FBM0I7QUFDQTtBQUNEOztBQUVELE1BQUlFLGNBQWMsQ0FBbEI7QUFDQW5CLFlBQVVrQixPQUFWLENBQWtCaEIsT0FBbEIsRUFBMkIseUJBQWlCO0FBQzFDRixjQUFVa0IsT0FBVixDQUFrQlAsYUFBbEIsRUFBaUMsVUFBQ1MsQ0FBRCxFQUFJQyxDQUFKLEVBQU9DLENBQVA7QUFBQSxhQUFhTCxRQUFRRyxDQUFSLEVBQVdELFdBQVgsRUFBd0JqQixPQUF4QixDQUFiO0FBQUEsS0FBakM7QUFDQWlCO0FBQ0QsR0FIRDtBQUlEIiwiZmlsZSI6InBvbHlnb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbnRhaW5lcn0gZnJvbSAnLi4vLi4vLi4vbGliL3V0aWxzJztcblxuLy8gQmFzaWMgcG9seWdvbiBzdXBwb3J0XG4vL1xuLy8gSGFuZGxlcyBzaW1wbGUgYW5kIGNvbXBsZXggcG9seWdvbnNcbi8vIFNpbXBsZSBwb2x5Z29ucyBhcmUgYXJyYXlzIG9mIHZlcnRpY2VzLCBpbXBsaWNpdGx5IFwiY2xvc2VkXCJcbi8vIENvbXBsZXggcG9seWdvbnMgYXJlIGFycmF5cyBvZiBzaW1wbGUgcG9seWdvbnMsIHdpdGggdGhlIGZpcnN0IHBvbHlnb25cbi8vIHJlcHJlc2VudGluZyB0aGUgb3V0ZXIgaHVsbCBhbmQgb3RoZXIgcG9seWdvbnMgcmVwcmVzZW50aW5nIGhvbGVzXG5cbi8qKlxuICogQ2hlY2sgaWYgdGhpcyBpcyBhIG5vbi1uZXN0ZWQgcG9seWdvbiAoaS5lLiB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpcyBhIG51bWJlcilcbiAqIEBwYXJhbSB7QXJyYXl9IHBvbHlnb24gLSBlaXRoZXIgYSBjb21wbGV4IG9yIHNpbXBsZSBwb2x5Z29uXG4gKiBAcmV0dXJuIHtCb29sZWFufSAtIHRydWUgaWYgdGhlIHBvbHlnb24gaXMgYSBzaW1wbGUgcG9seWdvbiAoaS5lLiBub3QgYW4gYXJyYXkgb2YgcG9seWdvbnMpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NpbXBsZShwb2x5Z29uKSB7XG4gIHJldHVybiBwb2x5Z29uLmxlbmd0aCA+PSAxICYmIHBvbHlnb25bMF0ubGVuZ3RoID49IDIgJiYgTnVtYmVyLmlzRmluaXRlKHBvbHlnb25bMF1bMF0pO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0byBlbnN1cmUgdGhhdCBhbGwgcG9seWdvbnMgaW4gYSBsaXN0IGFyZSBjb21wbGV4IC0gc2ltcGxpZmllcyBwcm9jZXNzaW5nXG4gKiBAcGFyYW0ge0FycmF5fSBwb2x5Z29uIC0gZWl0aGVyIGEgY29tcGxleCBvciBhIHNpbXBsZSBwb2x5Z29uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQHBhcmFtIHtPYmplY3R9IG9wdHMuZGltZW5zaW9ucyAtIGlmIDMsIHRoZSBjb29yZHMgd2lsbCBiZSBwYWRkZWQgd2l0aCAwJ3MgaWYgbmVlZGVkXG4gKiBAcmV0dXJuIHtBcnJheX0gLSByZXR1cm5zIGEgY29tcGxleCBwb2x5Z29uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKHBvbHlnb24sIHtkaW1lbnNpb25zID0gM30gPSB7fSkge1xuICByZXR1cm4gaXNTaW1wbGUocG9seWdvbikgPyBbcG9seWdvbl0gOiBwb2x5Z29uO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoaXMgaXMgYSBub24tbmVzdGVkIHBvbHlnb24gKGkuZS4gdGhlIGZpcnN0IGVsZW1lbnQgb2YgdGhlIGZpcnN0IGVsZW1lbnQgaXMgYSBudW1iZXIpXG4gKiBAcGFyYW0ge0FycmF5fSBwb2x5Z29uIC0gZWl0aGVyIGEgY29tcGxleCBvciBzaW1wbGUgcG9seWdvblxuICogQHJldHVybiB7Qm9vbGVhbn0gLSB0cnVlIGlmIHRoZSBwb2x5Z29uIGlzIGEgc2ltcGxlIHBvbHlnb24gKGkuZS4gbm90IGFuIGFycmF5IG9mIHBvbHlnb25zKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmVydGV4Q291bnQocG9seWdvbikge1xuICByZXR1cm4gaXNTaW1wbGUocG9seWdvbikgP1xuICAgIENvbnRhaW5lci5jb3VudChwb2x5Z29uKSA6XG4gICAgcG9seWdvbi5yZWR1Y2UoKGNvdW50LCBzaW1wbGVQb2x5Z29uKSA9PiBjb3VudCArIENvbnRhaW5lci5jb3VudChzaW1wbGVQb2x5Z29uKSwgMCk7XG59XG5cbi8vIFJldHVybiBudW1iZXIgb2YgdHJpYW5nbGVzIG5lZWRlZCB0byB0ZXNzZWxhdGUgdGhlIHBvbHlnb25cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmlhbmdsZUNvdW50KHBvbHlnb24pIHtcbiAgbGV0IHRyaWFuZ2xlQ291bnQgPSAwO1xuICBsZXQgZmlyc3QgPSB0cnVlO1xuICBmb3IgKGNvbnN0IHNpbXBsZVBvbHlnb24gb2Ygbm9ybWFsaXplKHBvbHlnb24pKSB7XG4gICAgY29uc3Qgc2l6ZSA9IENvbnRhaW5lci5jb3VudChzaW1wbGVQb2x5Z29uKTtcbiAgICBpZiAoZmlyc3QpIHtcbiAgICAgIHRyaWFuZ2xlQ291bnQgKz0gc2l6ZSA+IDMgPyBzaXplIC0gMyA6IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyaWFuZ2xlQ291bnQgKz0gc2l6ZSArIDE7XG4gICAgfVxuICAgIGZpcnN0ID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRyaWFuZ2xlQ291bnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoVmVydGV4KHBvbHlnb24sIHZpc2l0b3IpIHtcbiAgaWYgKGlzU2ltcGxlKHBvbHlnb24pKSB7XG4gICAgQ29udGFpbmVyLmZvckVhY2gocG9seWdvbiwgdmlzaXRvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHZlcnRleEluZGV4ID0gMDtcbiAgQ29udGFpbmVyLmZvckVhY2gocG9seWdvbiwgc2ltcGxlUG9seWdvbiA9PiB7XG4gICAgQ29udGFpbmVyLmZvckVhY2goc2ltcGxlUG9seWdvbiwgKHYsIGksIHApID0+IHZpc2l0b3IodiwgdmVydGV4SW5kZXgsIHBvbHlnb24pKTtcbiAgICB2ZXJ0ZXhJbmRleCsrO1xuICB9KTtcbn1cbiJdfQ==