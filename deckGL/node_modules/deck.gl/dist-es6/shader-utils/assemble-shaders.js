import { glGetDebugInfo } from 'luma.gl';

// Load shader chunks
// import SHADER_CHUNKS from '../../dist/shaderlib/shader-chunks';
import * as SHADER_CHUNKS from './shader-chunks';

export function checkRendererVendor(debugInfo, gpuVendor) {
  var vendor = debugInfo.vendor,
      renderer = debugInfo.renderer;

  var result = void 0;
  switch (gpuVendor) {
    case 'nvidia':
      result = vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i);
      break;
    case 'intel':
      result = vendor.match(/INTEL/i) || renderer.match(/INTEL/i);
      break;
    case 'amd':
      result = vendor.match(/AMD/i) || renderer.match(/AMD/i) || vendor.match(/ATI/i) || renderer.match(/ATI/i);
      break;
    default:
      result = false;
  }
  return result;
}

export function getPlatformShaderDefines(gl) {
  /* eslint-disable */
  var platformDefines = '';
  var debugInfo = glGetDebugInfo(gl);

  if (checkRendererVendor(debugInfo, 'nvidia')) {
    platformDefines += '#define NVIDIA_GPU\n#define NVIDIA_FP64_WORKAROUND 1\n#define NVIDIA_EQUATION_WORKAROUND 1\n';
  } else if (checkRendererVendor(debugInfo, 'intel')) {
    platformDefines += '#define INTEL_GPU\n#define INTEL_FP64_WORKAROUND 1\n#define NVIDIA_EQUATION_WORKAROUND 1\n #define INTEL_TAN_WORKAROUND 1\n';
  } else if (checkRendererVendor(debugInfo, 'amd')) {
    platformDefines += '#define AMD_GPU\n';
  } else {
    platformDefines += '#define DEFAULT_GPU\n';
  }

  return platformDefines;
}

function assembleShader(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _opts = opts,
      vs = _opts.vs,
      _opts$project = _opts.project,
      project = _opts$project === undefined ? true : _opts$project,
      _opts$project2 = _opts.project64,
      project64 = _opts$project2 === undefined ? false : _opts$project2;
  var _opts2 = opts,
      _opts2$fp = _opts2.fp64,
      fp64 = _opts2$fp === undefined ? false : _opts2$fp;

  if (project64 === true) {
    fp64 = true;
  }
  var source = getPlatformShaderDefines(gl) + '\n';
  opts = Object.assign({}, opts, { project: project, project64: project64, fp64: fp64 });
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Object.keys(SHADER_CHUNKS)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var chunkName = _step.value;

      if (opts[chunkName]) {
        source += SHADER_CHUNKS[chunkName].source + '\n';
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = (opts.modules || [])[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _chunkName = _step2.value;

      if (SHADER_CHUNKS[_chunkName]) {
        source += SHADER_CHUNKS[_chunkName].source + '\n';
      } else {
        throw new Error('Shader module ' + _chunkName + ' not found');
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  source += vs;
  return source;
}

export function assembleShaders(gl, opts) {
  return {
    gl: gl,
    vs: assembleShader(gl, opts),
    fs: opts.fs
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaGFkZXItdXRpbHMvYXNzZW1ibGUtc2hhZGVycy5qcyJdLCJuYW1lcyI6WyJnbEdldERlYnVnSW5mbyIsIlNIQURFUl9DSFVOS1MiLCJjaGVja1JlbmRlcmVyVmVuZG9yIiwiZGVidWdJbmZvIiwiZ3B1VmVuZG9yIiwidmVuZG9yIiwicmVuZGVyZXIiLCJyZXN1bHQiLCJtYXRjaCIsImdldFBsYXRmb3JtU2hhZGVyRGVmaW5lcyIsImdsIiwicGxhdGZvcm1EZWZpbmVzIiwiYXNzZW1ibGVTaGFkZXIiLCJvcHRzIiwidnMiLCJwcm9qZWN0IiwicHJvamVjdDY0IiwiZnA2NCIsInNvdXJjZSIsIk9iamVjdCIsImFzc2lnbiIsImtleXMiLCJjaHVua05hbWUiLCJtb2R1bGVzIiwiRXJyb3IiLCJhc3NlbWJsZVNoYWRlcnMiLCJmcyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUUEsY0FBUixRQUE2QixTQUE3Qjs7QUFFQTtBQUNBO0FBQ0EsT0FBTyxLQUFLQyxhQUFaLE1BQStCLGlCQUEvQjs7QUFFQSxPQUFPLFNBQVNDLG1CQUFULENBQTZCQyxTQUE3QixFQUF3Q0MsU0FBeEMsRUFBbUQ7QUFBQSxNQUNqREMsTUFEaUQsR0FDN0JGLFNBRDZCLENBQ2pERSxNQURpRDtBQUFBLE1BQ3pDQyxRQUR5QyxHQUM3QkgsU0FENkIsQ0FDekNHLFFBRHlDOztBQUV4RCxNQUFJQyxlQUFKO0FBQ0EsVUFBUUgsU0FBUjtBQUNBLFNBQUssUUFBTDtBQUNFRyxlQUFTRixPQUFPRyxLQUFQLENBQWEsU0FBYixLQUEyQkYsU0FBU0UsS0FBVCxDQUFlLFNBQWYsQ0FBcEM7QUFDQTtBQUNGLFNBQUssT0FBTDtBQUNFRCxlQUFTRixPQUFPRyxLQUFQLENBQWEsUUFBYixLQUEwQkYsU0FBU0UsS0FBVCxDQUFlLFFBQWYsQ0FBbkM7QUFDQTtBQUNGLFNBQUssS0FBTDtBQUNFRCxlQUNFRixPQUFPRyxLQUFQLENBQWEsTUFBYixLQUF3QkYsU0FBU0UsS0FBVCxDQUFlLE1BQWYsQ0FBeEIsSUFDQUgsT0FBT0csS0FBUCxDQUFhLE1BQWIsQ0FEQSxJQUN3QkYsU0FBU0UsS0FBVCxDQUFlLE1BQWYsQ0FGMUI7QUFHQTtBQUNGO0FBQ0VELGVBQVMsS0FBVDtBQWJGO0FBZUEsU0FBT0EsTUFBUDtBQUNEOztBQUVELE9BQU8sU0FBU0Usd0JBQVQsQ0FBa0NDLEVBQWxDLEVBQXNDO0FBQzNDO0FBQ0EsTUFBSUMsa0JBQWtCLEVBQXRCO0FBQ0EsTUFBTVIsWUFBWUgsZUFBZVUsRUFBZixDQUFsQjs7QUFFQSxNQUFJUixvQkFBb0JDLFNBQXBCLEVBQStCLFFBQS9CLENBQUosRUFBOEM7QUFDNUNRO0FBS0QsR0FORCxNQU1PLElBQUlULG9CQUFvQkMsU0FBcEIsRUFBK0IsT0FBL0IsQ0FBSixFQUE2QztBQUNsRFE7QUFNRCxHQVBNLE1BT0EsSUFBSVQsb0JBQW9CQyxTQUFwQixFQUErQixLQUEvQixDQUFKLEVBQTJDO0FBQ2hEUTtBQUdELEdBSk0sTUFJQTtBQUNMQTtBQUdEOztBQUVELFNBQU9BLGVBQVA7QUFDRDs7QUFFRCxTQUFTQyxjQUFULENBQXdCRixFQUF4QixFQUF1QztBQUFBLE1BQVhHLElBQVcsdUVBQUosRUFBSTtBQUFBLGNBQ1dBLElBRFg7QUFBQSxNQUM5QkMsRUFEOEIsU0FDOUJBLEVBRDhCO0FBQUEsNEJBQzFCQyxPQUQwQjtBQUFBLE1BQzFCQSxPQUQwQixpQ0FDaEIsSUFEZ0I7QUFBQSw2QkFDVkMsU0FEVTtBQUFBLE1BQ1ZBLFNBRFUsa0NBQ0UsS0FERjtBQUFBLGVBRWhCSCxJQUZnQjtBQUFBLHlCQUVoQ0ksSUFGZ0M7QUFBQSxNQUVoQ0EsSUFGZ0MsNkJBRXpCLEtBRnlCOztBQUdyQyxNQUFJRCxjQUFjLElBQWxCLEVBQXdCO0FBQ3RCQyxXQUFPLElBQVA7QUFDRDtBQUNELE1BQUlDLFNBQVlULHlCQUF5QkMsRUFBekIsQ0FBWixPQUFKO0FBQ0FHLFNBQU9NLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCUCxJQUFsQixFQUF3QixFQUFDRSxnQkFBRCxFQUFVQyxvQkFBVixFQUFxQkMsVUFBckIsRUFBeEIsQ0FBUDtBQVBxQztBQUFBO0FBQUE7O0FBQUE7QUFRckMseUJBQXdCRSxPQUFPRSxJQUFQLENBQVlwQixhQUFaLENBQXhCLDhIQUFvRDtBQUFBLFVBQXpDcUIsU0FBeUM7O0FBQ2xELFVBQUlULEtBQUtTLFNBQUwsQ0FBSixFQUFxQjtBQUNuQkosa0JBQWFqQixjQUFjcUIsU0FBZCxFQUF5QkosTUFBdEM7QUFDRDtBQUNGO0FBWm9DO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBYXJDLDJCQUF3QkwsS0FBS1UsT0FBTCxJQUFnQixFQUF4QyxvSUFBNEM7QUFBQSxVQUFqQ0QsVUFBaUM7O0FBQzFDLFVBQUlyQixjQUFjcUIsVUFBZCxDQUFKLEVBQThCO0FBQzVCSixrQkFBYWpCLGNBQWNxQixVQUFkLEVBQXlCSixNQUF0QztBQUNELE9BRkQsTUFFTztBQUNMLGNBQU0sSUFBSU0sS0FBSixvQkFBMkJGLFVBQTNCLGdCQUFOO0FBQ0Q7QUFDRjtBQW5Cb0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFvQnJDSixZQUFVSixFQUFWO0FBQ0EsU0FBT0ksTUFBUDtBQUNEOztBQUVELE9BQU8sU0FBU08sZUFBVCxDQUF5QmYsRUFBekIsRUFBNkJHLElBQTdCLEVBQW1DO0FBQ3hDLFNBQU87QUFDTEgsVUFESztBQUVMSSxRQUFJRixlQUFlRixFQUFmLEVBQW1CRyxJQUFuQixDQUZDO0FBR0xhLFFBQUliLEtBQUthO0FBSEosR0FBUDtBQUtEIiwiZmlsZSI6ImFzc2VtYmxlLXNoYWRlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dsR2V0RGVidWdJbmZvfSBmcm9tICdsdW1hLmdsJztcblxuLy8gTG9hZCBzaGFkZXIgY2h1bmtzXG4vLyBpbXBvcnQgU0hBREVSX0NIVU5LUyBmcm9tICcuLi8uLi9kaXN0L3NoYWRlcmxpYi9zaGFkZXItY2h1bmtzJztcbmltcG9ydCAqIGFzIFNIQURFUl9DSFVOS1MgZnJvbSAnLi9zaGFkZXItY2h1bmtzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUmVuZGVyZXJWZW5kb3IoZGVidWdJbmZvLCBncHVWZW5kb3IpIHtcbiAgY29uc3Qge3ZlbmRvciwgcmVuZGVyZXJ9ID0gZGVidWdJbmZvO1xuICBsZXQgcmVzdWx0O1xuICBzd2l0Y2ggKGdwdVZlbmRvcikge1xuICBjYXNlICdudmlkaWEnOlxuICAgIHJlc3VsdCA9IHZlbmRvci5tYXRjaCgvTlZJRElBL2kpIHx8IHJlbmRlcmVyLm1hdGNoKC9OVklESUEvaSk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2ludGVsJzpcbiAgICByZXN1bHQgPSB2ZW5kb3IubWF0Y2goL0lOVEVML2kpIHx8IHJlbmRlcmVyLm1hdGNoKC9JTlRFTC9pKTtcbiAgICBicmVhaztcbiAgY2FzZSAnYW1kJzpcbiAgICByZXN1bHQgPVxuICAgICAgdmVuZG9yLm1hdGNoKC9BTUQvaSkgfHwgcmVuZGVyZXIubWF0Y2goL0FNRC9pKSB8fFxuICAgICAgdmVuZG9yLm1hdGNoKC9BVEkvaSkgfHwgcmVuZGVyZXIubWF0Y2goL0FUSS9pKTtcbiAgICBicmVhaztcbiAgZGVmYXVsdDpcbiAgICByZXN1bHQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGxhdGZvcm1TaGFkZXJEZWZpbmVzKGdsKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlICovXG4gIGxldCBwbGF0Zm9ybURlZmluZXMgPSAnJztcbiAgY29uc3QgZGVidWdJbmZvID0gZ2xHZXREZWJ1Z0luZm8oZ2wpO1xuXG4gIGlmIChjaGVja1JlbmRlcmVyVmVuZG9yKGRlYnVnSW5mbywgJ252aWRpYScpKSB7XG4gICAgcGxhdGZvcm1EZWZpbmVzICs9IGBcXFxuI2RlZmluZSBOVklESUFfR1BVXG4jZGVmaW5lIE5WSURJQV9GUDY0X1dPUktBUk9VTkQgMVxuI2RlZmluZSBOVklESUFfRVFVQVRJT05fV09SS0FST1VORCAxXG5gO1xuICB9IGVsc2UgaWYgKGNoZWNrUmVuZGVyZXJWZW5kb3IoZGVidWdJbmZvLCAnaW50ZWwnKSkge1xuICAgIHBsYXRmb3JtRGVmaW5lcyArPSBgXFxcbiNkZWZpbmUgSU5URUxfR1BVXG4jZGVmaW5lIElOVEVMX0ZQNjRfV09SS0FST1VORCAxXG4jZGVmaW5lIE5WSURJQV9FUVVBVElPTl9XT1JLQVJPVU5EIDFcXG4gXFxcbiNkZWZpbmUgSU5URUxfVEFOX1dPUktBUk9VTkQgMVxuYDtcbiAgfSBlbHNlIGlmIChjaGVja1JlbmRlcmVyVmVuZG9yKGRlYnVnSW5mbywgJ2FtZCcpKSB7XG4gICAgcGxhdGZvcm1EZWZpbmVzICs9IGBcXFxuI2RlZmluZSBBTURfR1BVXG5gO1xuICB9IGVsc2Uge1xuICAgIHBsYXRmb3JtRGVmaW5lcyArPSBgXFxcbiNkZWZpbmUgREVGQVVMVF9HUFVcbmA7XG4gIH1cblxuICByZXR1cm4gcGxhdGZvcm1EZWZpbmVzO1xufVxuXG5mdW5jdGlvbiBhc3NlbWJsZVNoYWRlcihnbCwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHt2cywgcHJvamVjdCA9IHRydWUsIHByb2plY3Q2NCA9IGZhbHNlfSA9IG9wdHM7XG4gIGxldCB7ZnA2NCA9IGZhbHNlfSA9IG9wdHM7XG4gIGlmIChwcm9qZWN0NjQgPT09IHRydWUpIHtcbiAgICBmcDY0ID0gdHJ1ZTtcbiAgfVxuICBsZXQgc291cmNlID0gYCR7Z2V0UGxhdGZvcm1TaGFkZXJEZWZpbmVzKGdsKX1cXG5gO1xuICBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cywge3Byb2plY3QsIHByb2plY3Q2NCwgZnA2NH0pO1xuICBmb3IgKGNvbnN0IGNodW5rTmFtZSBvZiBPYmplY3Qua2V5cyhTSEFERVJfQ0hVTktTKSkge1xuICAgIGlmIChvcHRzW2NodW5rTmFtZV0pIHtcbiAgICAgIHNvdXJjZSArPSBgJHtTSEFERVJfQ0hVTktTW2NodW5rTmFtZV0uc291cmNlfVxcbmA7XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3QgY2h1bmtOYW1lIG9mIG9wdHMubW9kdWxlcyB8fCBbXSkge1xuICAgIGlmIChTSEFERVJfQ0hVTktTW2NodW5rTmFtZV0pIHtcbiAgICAgIHNvdXJjZSArPSBgJHtTSEFERVJfQ0hVTktTW2NodW5rTmFtZV0uc291cmNlfVxcbmA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2hhZGVyIG1vZHVsZSAke2NodW5rTmFtZX0gbm90IGZvdW5kYCk7XG4gICAgfVxuICB9XG4gIHNvdXJjZSArPSB2cztcbiAgcmV0dXJuIHNvdXJjZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlU2hhZGVycyhnbCwgb3B0cykge1xuICByZXR1cm4ge1xuICAgIGdsLFxuICAgIHZzOiBhc3NlbWJsZVNoYWRlcihnbCwgb3B0cyksXG4gICAgZnM6IG9wdHMuZnNcbiAgfTtcbn1cbiJdfQ==