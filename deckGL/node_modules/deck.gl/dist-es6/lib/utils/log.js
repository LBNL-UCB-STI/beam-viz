/* eslint-disable no-console */
/* global console */
import assert from 'assert';

export default function log(priority) {
  assert(Number.isFinite(priority), 'log priority must be a number');
  if (priority <= log.priority) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    // Node doesn't have console.debug, but looks better in browser consoles
    if (console.debug) {
      var _console;

      (_console = console).debug.apply(_console, args);
    } else {
      var _console2;

      (_console2 = console).info.apply(_console2, args);
    }
  }
}

var cache = {};

function once(priority, arg) {
  if (!cache[arg] && priority <= log.priority) {
    var _console3;

    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    (_console3 = console).warn.apply(_console3, [arg].concat(args));
    cache[arg] = true;
  }
}

log.priority = 0;
log.log = log;
log.once = once;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdXRpbHMvbG9nLmpzIl0sIm5hbWVzIjpbImFzc2VydCIsImxvZyIsInByaW9yaXR5IiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJhcmdzIiwiY29uc29sZSIsImRlYnVnIiwiaW5mbyIsImNhY2hlIiwib25jZSIsImFyZyIsIndhcm4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxPQUFPQSxNQUFQLE1BQW1CLFFBQW5COztBQUVBLGVBQWUsU0FBU0MsR0FBVCxDQUFhQyxRQUFiLEVBQWdDO0FBQzdDRixTQUFPRyxPQUFPQyxRQUFQLENBQWdCRixRQUFoQixDQUFQLEVBQWtDLCtCQUFsQztBQUNBLE1BQUlBLFlBQVlELElBQUlDLFFBQXBCLEVBQThCO0FBQUEsc0NBRlNHLElBRVQ7QUFGU0EsVUFFVDtBQUFBOztBQUM1QjtBQUNBLFFBQUlDLFFBQVFDLEtBQVosRUFBbUI7QUFBQTs7QUFDakIsMkJBQVFBLEtBQVIsaUJBQWlCRixJQUFqQjtBQUNELEtBRkQsTUFFTztBQUFBOztBQUNMLDRCQUFRRyxJQUFSLGtCQUFnQkgsSUFBaEI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsSUFBTUksUUFBUSxFQUFkOztBQUVBLFNBQVNDLElBQVQsQ0FBY1IsUUFBZCxFQUF3QlMsR0FBeEIsRUFBc0M7QUFDcEMsTUFBSSxDQUFDRixNQUFNRSxHQUFOLENBQUQsSUFBZVQsWUFBWUQsSUFBSUMsUUFBbkMsRUFBNkM7QUFBQTs7QUFBQSx1Q0FEZkcsSUFDZTtBQURmQSxVQUNlO0FBQUE7O0FBQzNDLDBCQUFRTyxJQUFSLG1CQUFpQkQsR0FBakIsU0FBeUJOLElBQXpCO0FBQ0FJLFVBQU1FLEdBQU4sSUFBYSxJQUFiO0FBQ0Q7QUFDRjs7QUFFRFYsSUFBSUMsUUFBSixHQUFlLENBQWY7QUFDQUQsSUFBSUEsR0FBSixHQUFVQSxHQUFWO0FBQ0FBLElBQUlTLElBQUosR0FBV0EsSUFBWCIsImZpbGUiOiJsb2cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4vKiBnbG9iYWwgY29uc29sZSAqL1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2cocHJpb3JpdHksIC4uLmFyZ3MpIHtcbiAgYXNzZXJ0KE51bWJlci5pc0Zpbml0ZShwcmlvcml0eSksICdsb2cgcHJpb3JpdHkgbXVzdCBiZSBhIG51bWJlcicpO1xuICBpZiAocHJpb3JpdHkgPD0gbG9nLnByaW9yaXR5KSB7XG4gICAgLy8gTm9kZSBkb2Vzbid0IGhhdmUgY29uc29sZS5kZWJ1ZywgYnV0IGxvb2tzIGJldHRlciBpbiBicm93c2VyIGNvbnNvbGVzXG4gICAgaWYgKGNvbnNvbGUuZGVidWcpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoLi4uYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuaW5mbyguLi5hcmdzKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgY2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gb25jZShwcmlvcml0eSwgYXJnLCAuLi5hcmdzKSB7XG4gIGlmICghY2FjaGVbYXJnXSAmJiBwcmlvcml0eSA8PSBsb2cucHJpb3JpdHkpIHtcbiAgICBjb25zb2xlLndhcm4oLi4uW2FyZywgLi4uYXJnc10pO1xuICAgIGNhY2hlW2FyZ10gPSB0cnVlO1xuICB9XG59XG5cbmxvZy5wcmlvcml0eSA9IDA7XG5sb2cubG9nID0gbG9nO1xubG9nLm9uY2UgPSBvbmNlO1xuIl19