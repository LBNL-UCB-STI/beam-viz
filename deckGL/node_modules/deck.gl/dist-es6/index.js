// Copyright (c) 2015 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable max-len */

// Utilities
export { assembleShaders } from './shader-utils';

// Lib
export { Layer, CompositeLayer, LayerManager, AttributeManager } from './lib';
export { COORDINATE_SYSTEM } from './lib';
export { default as PerspectiveViewport } from './lib/viewports/perspective-viewport';

// Core Layers
export { default as ArcLayer } from './layers/core/arc-layer/arc-layer';
export { default as GridLayer } from './layers/core/grid-layer/grid-layer';
export { default as PointDensityGridLayer } from './layers/core/point-density-grid-layer/point-density-grid-layer';
export { default as PointDensityHexagonLayer } from './layers/core/point-density-hexagon-layer/point-density-hexagon-layer';
export { default as HexagonLayer } from './layers/core/hexagon-layer/hexagon-layer';
export { default as IconLayer } from './layers/core/icon-layer/icon-layer';
export { default as LineLayer } from './layers/core/line-layer/line-layer';
export { default as PointCloudLayer } from './layers/core/point-cloud-layer/point-cloud-layer';
export { default as ScatterplotLayer } from './layers/core/scatterplot-layer/scatterplot-layer';
export { default as ScreenGridLayer } from './layers/core/screen-grid-layer/screen-grid-layer';

export { default as PathLayer } from './layers/core/path-layer/path-layer';
export { default as PolygonLayer } from './layers/core/polygon-layer/polygon-layer';
export { default as GeoJsonLayer } from './layers/core/geojson-layer/geojson-layer';

// 64-bit Layers
export { default as ScatterplotLayer64 } from './layers/fp64/scatterplot-layer/scatterplot-layer-64';
export { default as ArcLayer64 } from './layers/fp64/arc-layer/arc-layer-64';
export { default as LineLayer64 } from './layers/fp64/line-layer/line-layer-64';

// Deprecated Layers
export { default as ChoroplethLayer } from './layers/deprecated/choropleth-layer/choropleth-layer';
export { default as ChoroplethLayer64 } from './layers/deprecated/choropleth-layer-64/choropleth-layer-64';
export { default as ExtrudedChoroplethLayer64 } from './layers/deprecated/extruded-choropleth-layer-64/extruded-choropleth-layer-64';

// React exports
export { default as DeckGL } from './react/deckgl';
export { default } from './react/deckgl';

// Experimental Features (May change in minor version bumps, use at your own risk)
import { get } from './lib/utils/container';
import { EffectManager, Effect } from './experimental/lib';
import { default as ReflectionEffect } from './experimental/effects/reflection-effect';

export var experimental = {
  get: get,
  EffectManager: EffectManager,
  Effect: Effect,
  ReflectionEffect: ReflectionEffect
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJhc3NlbWJsZVNoYWRlcnMiLCJMYXllciIsIkNvbXBvc2l0ZUxheWVyIiwiTGF5ZXJNYW5hZ2VyIiwiQXR0cmlidXRlTWFuYWdlciIsIkNPT1JESU5BVEVfU1lTVEVNIiwiZGVmYXVsdCIsIlBlcnNwZWN0aXZlVmlld3BvcnQiLCJBcmNMYXllciIsIkdyaWRMYXllciIsIlBvaW50RGVuc2l0eUdyaWRMYXllciIsIlBvaW50RGVuc2l0eUhleGFnb25MYXllciIsIkhleGFnb25MYXllciIsIkljb25MYXllciIsIkxpbmVMYXllciIsIlBvaW50Q2xvdWRMYXllciIsIlNjYXR0ZXJwbG90TGF5ZXIiLCJTY3JlZW5HcmlkTGF5ZXIiLCJQYXRoTGF5ZXIiLCJQb2x5Z29uTGF5ZXIiLCJHZW9Kc29uTGF5ZXIiLCJTY2F0dGVycGxvdExheWVyNjQiLCJBcmNMYXllcjY0IiwiTGluZUxheWVyNjQiLCJDaG9yb3BsZXRoTGF5ZXIiLCJDaG9yb3BsZXRoTGF5ZXI2NCIsIkV4dHJ1ZGVkQ2hvcm9wbGV0aExheWVyNjQiLCJEZWNrR0wiLCJnZXQiLCJFZmZlY3RNYW5hZ2VyIiwiRWZmZWN0IiwiUmVmbGVjdGlvbkVmZmVjdCIsImV4cGVyaW1lbnRhbCJdLCJtYXBwaW5ncyI6IkFBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVFBLGVBQVIsUUFBOEIsZ0JBQTlCOztBQUVBO0FBQ0EsU0FBUUMsS0FBUixFQUFlQyxjQUFmLEVBQStCQyxZQUEvQixFQUE2Q0MsZ0JBQTdDLFFBQW9FLE9BQXBFO0FBQ0EsU0FBUUMsaUJBQVIsUUFBZ0MsT0FBaEM7QUFDQSxTQUFRQyxXQUFXQyxtQkFBbkIsUUFBNkMsc0NBQTdDOztBQUVBO0FBQ0EsU0FBUUQsV0FBV0UsUUFBbkIsUUFBa0MsbUNBQWxDO0FBQ0EsU0FBUUYsV0FBV0csU0FBbkIsUUFBbUMscUNBQW5DO0FBQ0EsU0FBUUgsV0FBV0kscUJBQW5CLFFBQStDLGlFQUEvQztBQUNBLFNBQVFKLFdBQVdLLHdCQUFuQixRQUFrRCx1RUFBbEQ7QUFDQSxTQUFRTCxXQUFXTSxZQUFuQixRQUFzQywyQ0FBdEM7QUFDQSxTQUFRTixXQUFXTyxTQUFuQixRQUFtQyxxQ0FBbkM7QUFDQSxTQUFRUCxXQUFXUSxTQUFuQixRQUFtQyxxQ0FBbkM7QUFDQSxTQUFRUixXQUFXUyxlQUFuQixRQUF5QyxtREFBekM7QUFDQSxTQUFRVCxXQUFXVSxnQkFBbkIsUUFBMEMsbURBQTFDO0FBQ0EsU0FBUVYsV0FBV1csZUFBbkIsUUFBeUMsbURBQXpDOztBQUVBLFNBQVFYLFdBQVdZLFNBQW5CLFFBQW1DLHFDQUFuQztBQUNBLFNBQVFaLFdBQVdhLFlBQW5CLFFBQXNDLDJDQUF0QztBQUNBLFNBQVFiLFdBQVdjLFlBQW5CLFFBQXNDLDJDQUF0Qzs7QUFFQTtBQUNBLFNBQVFkLFdBQVdlLGtCQUFuQixRQUE0QyxzREFBNUM7QUFDQSxTQUFRZixXQUFXZ0IsVUFBbkIsUUFBb0Msc0NBQXBDO0FBQ0EsU0FBUWhCLFdBQVdpQixXQUFuQixRQUFxQyx3Q0FBckM7O0FBRUE7QUFDQSxTQUFRakIsV0FBV2tCLGVBQW5CLFFBQXlDLHVEQUF6QztBQUNBLFNBQVFsQixXQUFXbUIsaUJBQW5CLFFBQTJDLDZEQUEzQztBQUNBLFNBQVFuQixXQUFXb0IseUJBQW5CLFFBQW1ELCtFQUFuRDs7QUFFQTtBQUNBLFNBQVFwQixXQUFXcUIsTUFBbkIsUUFBZ0MsZ0JBQWhDO0FBQ0EsU0FBUXJCLE9BQVIsUUFBaUMsZ0JBQWpDOztBQUVBO0FBQ0EsU0FBUXNCLEdBQVIsUUFBa0IsdUJBQWxCO0FBQ0EsU0FBUUMsYUFBUixFQUF1QkMsTUFBdkIsUUFBb0Msb0JBQXBDO0FBQ0EsU0FBUXhCLFdBQVd5QixnQkFBbkIsUUFBMEMsMENBQTFDOztBQUVBLE9BQU8sSUFBTUMsZUFBZTtBQUMxQkosVUFEMEI7QUFFMUJDLDhCQUYwQjtBQUcxQkMsZ0JBSDBCO0FBSTFCQztBQUowQixDQUFyQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlx0Ly8gQ29weXJpZ2h0IChjKSAyMDE1IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuLy8gVXRpbGl0aWVzXG5leHBvcnQge2Fzc2VtYmxlU2hhZGVyc30gZnJvbSAnLi9zaGFkZXItdXRpbHMnO1xuXG4vLyBMaWJcbmV4cG9ydCB7TGF5ZXIsIENvbXBvc2l0ZUxheWVyLCBMYXllck1hbmFnZXIsIEF0dHJpYnV0ZU1hbmFnZXJ9IGZyb20gJy4vbGliJztcbmV4cG9ydCB7Q09PUkRJTkFURV9TWVNURU19IGZyb20gJy4vbGliJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBQZXJzcGVjdGl2ZVZpZXdwb3J0fSBmcm9tICcuL2xpYi92aWV3cG9ydHMvcGVyc3BlY3RpdmUtdmlld3BvcnQnO1xuXG4vLyBDb3JlIExheWVyc1xuZXhwb3J0IHtkZWZhdWx0IGFzIEFyY0xheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL2FyYy1sYXllci9hcmMtbGF5ZXInO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEdyaWRMYXllcn0gZnJvbSAnLi9sYXllcnMvY29yZS9ncmlkLWxheWVyL2dyaWQtbGF5ZXInO1xuZXhwb3J0IHtkZWZhdWx0IGFzIFBvaW50RGVuc2l0eUdyaWRMYXllcn0gZnJvbSAnLi9sYXllcnMvY29yZS9wb2ludC1kZW5zaXR5LWdyaWQtbGF5ZXIvcG9pbnQtZGVuc2l0eS1ncmlkLWxheWVyJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBQb2ludERlbnNpdHlIZXhhZ29uTGF5ZXJ9IGZyb20gJy4vbGF5ZXJzL2NvcmUvcG9pbnQtZGVuc2l0eS1oZXhhZ29uLWxheWVyL3BvaW50LWRlbnNpdHktaGV4YWdvbi1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgSGV4YWdvbkxheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL2hleGFnb24tbGF5ZXIvaGV4YWdvbi1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgSWNvbkxheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL2ljb24tbGF5ZXIvaWNvbi1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgTGluZUxheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL2xpbmUtbGF5ZXIvbGluZS1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgUG9pbnRDbG91ZExheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL3BvaW50LWNsb3VkLWxheWVyL3BvaW50LWNsb3VkLWxheWVyJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBTY2F0dGVycGxvdExheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL3NjYXR0ZXJwbG90LWxheWVyL3NjYXR0ZXJwbG90LWxheWVyJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBTY3JlZW5HcmlkTGF5ZXJ9IGZyb20gJy4vbGF5ZXJzL2NvcmUvc2NyZWVuLWdyaWQtbGF5ZXIvc2NyZWVuLWdyaWQtbGF5ZXInO1xuXG5leHBvcnQge2RlZmF1bHQgYXMgUGF0aExheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL3BhdGgtbGF5ZXIvcGF0aC1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgUG9seWdvbkxheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL3BvbHlnb24tbGF5ZXIvcG9seWdvbi1sYXllcic7XG5leHBvcnQge2RlZmF1bHQgYXMgR2VvSnNvbkxheWVyfSBmcm9tICcuL2xheWVycy9jb3JlL2dlb2pzb24tbGF5ZXIvZ2VvanNvbi1sYXllcic7XG5cbi8vIDY0LWJpdCBMYXllcnNcbmV4cG9ydCB7ZGVmYXVsdCBhcyBTY2F0dGVycGxvdExheWVyNjR9IGZyb20gJy4vbGF5ZXJzL2ZwNjQvc2NhdHRlcnBsb3QtbGF5ZXIvc2NhdHRlcnBsb3QtbGF5ZXItNjQnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEFyY0xheWVyNjR9IGZyb20gJy4vbGF5ZXJzL2ZwNjQvYXJjLWxheWVyL2FyYy1sYXllci02NCc7XG5leHBvcnQge2RlZmF1bHQgYXMgTGluZUxheWVyNjR9IGZyb20gJy4vbGF5ZXJzL2ZwNjQvbGluZS1sYXllci9saW5lLWxheWVyLTY0JztcblxuLy8gRGVwcmVjYXRlZCBMYXllcnNcbmV4cG9ydCB7ZGVmYXVsdCBhcyBDaG9yb3BsZXRoTGF5ZXJ9IGZyb20gJy4vbGF5ZXJzL2RlcHJlY2F0ZWQvY2hvcm9wbGV0aC1sYXllci9jaG9yb3BsZXRoLWxheWVyJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBDaG9yb3BsZXRoTGF5ZXI2NH0gZnJvbSAnLi9sYXllcnMvZGVwcmVjYXRlZC9jaG9yb3BsZXRoLWxheWVyLTY0L2Nob3JvcGxldGgtbGF5ZXItNjQnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEV4dHJ1ZGVkQ2hvcm9wbGV0aExheWVyNjR9IGZyb20gJy4vbGF5ZXJzL2RlcHJlY2F0ZWQvZXh0cnVkZWQtY2hvcm9wbGV0aC1sYXllci02NC9leHRydWRlZC1jaG9yb3BsZXRoLWxheWVyLTY0JztcblxuLy8gUmVhY3QgZXhwb3J0c1xuZXhwb3J0IHtkZWZhdWx0IGFzIERlY2tHTH0gZnJvbSAnLi9yZWFjdC9kZWNrZ2wnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGRlZmF1bHR9IGZyb20gJy4vcmVhY3QvZGVja2dsJztcblxuLy8gRXhwZXJpbWVudGFsIEZlYXR1cmVzIChNYXkgY2hhbmdlIGluIG1pbm9yIHZlcnNpb24gYnVtcHMsIHVzZSBhdCB5b3VyIG93biByaXNrKVxuaW1wb3J0IHtnZXR9IGZyb20gJy4vbGliL3V0aWxzL2NvbnRhaW5lcic7XG5pbXBvcnQge0VmZmVjdE1hbmFnZXIsIEVmZmVjdH0gZnJvbSAnLi9leHBlcmltZW50YWwvbGliJztcbmltcG9ydCB7ZGVmYXVsdCBhcyBSZWZsZWN0aW9uRWZmZWN0fSBmcm9tICcuL2V4cGVyaW1lbnRhbC9lZmZlY3RzL3JlZmxlY3Rpb24tZWZmZWN0JztcblxuZXhwb3J0IGNvbnN0IGV4cGVyaW1lbnRhbCA9IHtcbiAgZ2V0LFxuICBFZmZlY3RNYW5hZ2VyLFxuICBFZmZlY3QsXG4gIFJlZmxlY3Rpb25FZmZlY3Rcbn07XG4iXX0=